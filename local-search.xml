<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS144-Lab4实验笔记</title>
    <link href="/202205/cs144-lab4/"/>
    <url>/202205/cs144-lab4/</url>
    
    <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>这个实验主要完成TCP Endpoint的功能，一个TCP端点包含一个TCPSender，和一个TCPReceiver。进行TCP连接的时候，通常是一个TCP端点A向另一个TCP端点B发送“连接建立”请求，经过三次握手后TCP连接建立。之后两个端点间可以相互传送数据。每当一端要发送的字节流到达EOF的时候，向对端发送一个“连接关闭”请求，最后当两个端点均已经发送连接关闭的请求，并且都接到了这个请求的响应后，TCP连接就算关闭了。</p><h3 id="TCP状态机"><a href="#TCP状态机" class="headerlink" title="TCP状态机"></a>TCP状态机</h3><p>简介中简单描述了下TCP通信的流程，但具体的TCP状态转移需要考虑一些边界情况，可参考下图，<br><img src="/img/cs144-pic/TCP-FSM.png"></p><h3 id="TCP连接的建立-非同时握手"><a href="#TCP连接的建立-非同时握手" class="headerlink" title="TCP连接的建立(非同时握手)"></a>TCP连接的建立(非同时握手)</h3><p><img src="/img/cs144-pic/TCP-SYN.png"></p><h3 id="TCP连接的关闭-非同时关闭"><a href="#TCP连接的关闭-非同时关闭" class="headerlink" title="TCP连接的关闭(非同时关闭)"></a>TCP连接的关闭(非同时关闭)</h3><p><img src="/img/cs144-pic/TCP-FIN.png"></p><blockquote><p>以上图片均来源于 <a href="https://en.wikipedia.org/wiki/The_Linux_Programming_Interface">Linux&#x2F;UNIX系统编程手册，人民邮电出版社</a></p></blockquote><h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><h3 id="接受报文"><a href="#接受报文" class="headerlink" title="接受报文"></a>接受报文</h3><p>TCP连接从网络上接受报文，并调用<code>segment_received</code>函数。当调用发生时，函数应该如下工作：</p><ol><li>如果收到了 <code>RST</code> 报文，则关闭这个连接，并将接受字节流和发送字节流均设为ERROR状态。否则：</li><li>将报文交给<code>TCPReceiver</code>来处理本报文的包头中的<code>seqno/SYN/FIN</code>和数据段</li><li>如果收到了<code>ACK</code>报文（也就是除了第一个SYN报文外的所有正常报文），通知<code>TCPSender</code>更新<code>ackno</code>和<code>win_size</code></li><li>如果当前报文包含数据或者SYN&#x2F;FIN标志位有效，则至少响应一个报文，以通知对端本端最新的<code>ackno</code>和<code>win_size</code>。</li><li>如果收到了Keepalive报文，见下。</li></ol><h3 id="发送报文"><a href="#发送报文" class="headerlink" title="发送报文"></a>发送报文</h3><ol><li>每当<code>TCPSender</code>将一个TCP报文添加到它的待发送队列中时，TCP连接需要从中取出并将其发送。</li><li>在发送当前数据包之前，TCPConnection 会根据<code>TCPReceiver</code>的<code>ackno</code> 和 <code>win_size</code>，将其放置进待发送 TCPSegment 中，并设置报文的 <code>ACK</code>。</li></ol><h3 id="TCP-KeepAlives"><a href="#TCP-KeepAlives" class="headerlink" title="TCP KeepAlives"></a>TCP KeepAlives</h3><p>KeepAlive是一种周期性检查另一端主机的该TCP连接是否存活的机制。在<a href="https://datatracker.ietf.org/doc/html/rfc1122#page-101">RFC 1122</a> 中被描述。</p><p>KeepAlive报文是一个空的报文段（或者仅包含一个任意字节）。它的序列号等于对端已经ACK过的字节减1: <code>SEG.SEQ = SND.NXT-1</code>，这个序列号对应的数据显然被对方成功接受了，所以不会对对端的接受数据造成影响。如果接受方能正确处理这个KeepAlive报文，则同样返回一个空的<code>ACK</code>报文即可，表明当前TCP连接仍然存活。</p><p>KeepAlive报文和其响应报文都不会包含任何新的有效数据，丢失的时候也不会重传。RFC1122同样指出，仅凭一个没有收到响应的KeepAlive报文不能判断对端的TCP连接已经停止工作，所以失败时需要多次发送Keepalive报文。</p><p>讲义中给出了处理对端KeepAlive报文的伪算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-keyword">if</span> (_receiver.<span class="hljs-built_in">ackno</span>().<span class="hljs-built_in">has_value</span>() <span class="hljs-built_in"><span class="hljs-keyword">and</span></span> (seg.<span class="hljs-built_in">length_in_sequence_space</span>() == <span class="hljs-number">0</span>)<br>         <span class="hljs-keyword">and</span> seg.<span class="hljs-built_in">header</span>().seqno == _receiver.<span class="hljs-built_in">ackno</span>().<span class="hljs-built_in">value</span>() - <span class="hljs-number">1</span>) &#123;<br>         _sender.<span class="hljs-built_in">send_empty_segment</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接受RST报文"><a href="#接受RST报文" class="headerlink" title="接受RST报文"></a>接受RST报文</h3><p>有几种情况本端会收到对端的RST报文</p><ul><li>本端向对端没有打开的端口发送了SYN报文，会收到RST报文。</li><li>TCP连接建立后，对端突然崩溃，本端再发送正常报文时，会收到RST报文。</li><li>TIME-WAIT状态下收到了之前的数据报文，本端正常回复<code>ACK</code>，但对端已经关闭了这个连接，所以会回复一个RST报文（这种情况会导致本端TIME-WAIT状态提前结束，称为<a href="https://www.rfc-editor.org/rfc/rfc1337.html">TIME-WAIT Assassination，在RFC1337中有所描述</a>）</li><li>对端主动发出RST报文</li></ul><p>本端收到了RST报文后，不需要任何回复，直接关闭这条TCP连接，并将发送&#x2F;接受的数据流关闭。（实验中是将 <code>ByteStream inbound/outbound</code>设为 <code>ERROR</code>状态）</p><h3 id="发送RST报文"><a href="#发送RST报文" class="headerlink" title="发送RST报文"></a>发送RST报文</h3><p>上一节已经说明了什么情况下会发送RST报文，但还有以下情况使得一端会主动发出RST报文</p><ul><li>本端socket程序收到了程序终止的信号，如<code>SIGINT</code>，直接发送<code>RST</code>终止连接。</li><li>实验讲义中说明，如果当前重传次数超过上限，则需要<code>RST</code>报文终止连接。</li></ul><p><code>RST</code>报文的<code>seqno</code>部分必须是正确的（正确指的是在对端的接受窗口内，亦即<code>(RCV.NXT &lt;= SEG.SEQ &lt; RCV.NXT+RCV.WND)</code>，<a href="https://datatracker.ietf.org/doc/html/rfc5961#section-3">这样可以防止TCP重置攻击，见RFC5961</a></p><h2 id="调试心得"><a href="#调试心得" class="headerlink" title="调试心得"></a>调试心得</h2><ol><li><p>TCPConnection起始状态是<code>LISTEN</code>，<code>active</code>变量应该为<code>true</code></p><p>测试函数里面，FSM什么都不执行就是LISTEN态。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// tests/tcp_expectation.hh</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Listen</span> :</span> <span class="hljs-keyword">public</span> TCPAction &#123;<br>    <span class="hljs-function">std::string <span class="hljs-title">description</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;listen&quot;</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(TCPTestHarness &amp;)</span> <span class="hljs-keyword">const</span> </span>&#123;&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p> 我最开始的实现时候<code>_active</code>设为false，<code>t_ack_rst</code> 这个测试包含一个LISTEN态的比较，死活过不去。</p></li><li><p>同时打开</p><p>按照RFC 793的描述，同时打开的情况下，双方第二次握手均应该发送<code>SYN+ACK</code>包，但是测试逻辑这里却希望仅希望收到<code>ACK</code>包</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bnf">    TCP A                                            TCP B<br><br>1.  CLOSED                                           CLOSED<br><br>2.  SYN-SENT     --&gt; <span class="hljs-attribute">&lt;SEQ=100&gt;</span><span class="hljs-attribute">&lt;CTL=SYN&gt;</span>              ...<br><br>3.  SYN-RECEIVED <span class="hljs-attribute">&lt;-- &lt;SEQ=300&gt;</span><span class="hljs-attribute">&lt;CTL=SYN&gt;</span>              <span class="hljs-attribute">&lt;-- SYN-SENT</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">4.               ... &lt;SEQ=100&gt;</span><span class="hljs-attribute">&lt;CTL=SYN&gt;</span>              --&gt; SYN-RECEIVED<br><br>5.  SYN-RECEIVED --&gt; <span class="hljs-attribute">&lt;SEQ=100&gt;</span><span class="hljs-attribute">&lt;ACK=301&gt;</span><span class="hljs-attribute">&lt;CTL=SYN,ACK&gt;</span> ...<br><br>6.  ESTABLISHED  <span class="hljs-attribute">&lt;-- &lt;SEQ=300&gt;</span><span class="hljs-attribute">&lt;ACK=101&gt;</span><span class="hljs-attribute">&lt;CTL=SYN,ACK&gt;</span> <span class="hljs-attribute">&lt;-- SYN-RECEIVED</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">7.               ... &lt;SEQ=101&gt;</span><span class="hljs-attribute">&lt;ACK=301&gt;</span><span class="hljs-attribute">&lt;CTL=ACK&gt;</span>     --&gt; ESTABLISHED<br><br>              Simultaneous Connection Synchronization<br><br>                            Figure 8.<br></code></pre></td></tr></table></figure><p>测试函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TCPTestHarness <span class="hljs-title">test_2</span><span class="hljs-params">(cfg)</span></span>;<br><br>test_2.<span class="hljs-built_in">execute</span>(Connect&#123;&#125;);<br>test_2.<span class="hljs-built_in">execute</span>(<span class="hljs-built_in">Tick</span>(<span class="hljs-number">1</span>));<br><br>TCPSegment seg = test_2.<span class="hljs-built_in">expect_seg</span>(ExpectOneSegment&#123;&#125;.<span class="hljs-built_in">with_syn</span>(<span class="hljs-literal">true</span>).<span class="hljs-built_in">with_ack</span>(<span class="hljs-literal">false</span>),<br>                                    <span class="hljs-string">&quot;test 2 failed: could not parse SYN segment or invalid flags&quot;</span>);<br><span class="hljs-keyword">auto</span> &amp;seg_hdr = seg.<span class="hljs-built_in">header</span>();<br><br>test_2.<span class="hljs-built_in">execute</span>(ExpectState&#123;State::SYN_SENT&#125;);<br><br><span class="hljs-comment">// send SYN (no ACK yet)</span><br><span class="hljs-function"><span class="hljs-keyword">const</span> WrappingInt32 <span class="hljs-title">isn</span><span class="hljs-params">(rd())</span></span>;<br>test_2.<span class="hljs-built_in">send_syn</span>(isn);<br>test_2.<span class="hljs-built_in">execute</span>(<span class="hljs-built_in">Tick</span>(<span class="hljs-number">1</span>));<br><br>test_2.<span class="hljs-built_in">expect_seg</span>(ExpectOneSegment&#123;&#125;.<span class="hljs-built_in">with_syn</span>(<span class="hljs-literal">false</span>).<span class="hljs-built_in">with_ack</span>(<span class="hljs-literal">true</span>).<span class="hljs-built_in">with_ackno</span>(isn + <span class="hljs-number">1</span>),<br>                  <span class="hljs-string">&quot;test 2 failed: bad ACK for SYN&quot;</span>);<br><br>test_2.<span class="hljs-built_in">execute</span>(ExpectState&#123;State::SYN_RCVD&#125;);<br></code></pre></td></tr></table></figure></li><li><p>调试tun144&#x2F;145</p></li></ol><p>本地tun144&#x2F;tun145两张网卡无法通信。tun145发的包tun144收不到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ip a<br>...<br>49: tun144: &lt;NO-CARRIER,POINTOPOINT,MULTICAST,NOARP,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 500<br>    link/none <br>    inet 169.254.144.1/24 scope global tun144<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::40ad:1e69:28e2:988c/64 scope link stable-privacy <br>       valid_lft forever preferred_lft forever<br>50: tun145: &lt;NO-CARRIER,POINTOPOINT,MULTICAST,NOARP,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 500<br>    link/none <br>    inet 169.254.145.1/24 scope global tun145<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::8e6c:7fed:e456:8f35/64 scope link stable-privacy <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ip r<br>default via 10.19.0.254 dev eno1 proto static metric 100 <br>default via 10.30.0.254 dev eno3 proto static metric 20102 <br>10.19.0.0/24 dev eno1 proto kernel scope link src 10.19.0.36 metric 100 <br>10.30.0.0/19 dev eno3 proto kernel scope link src 10.30.19.36 metric 102 <br>169.254.0.0/16 dev tun144 scope link metric 1000 linkdown <br>169.254.144.0/24 dev tun144 scope link linkdown rto_min lock 10ms <br>169.254.145.0/24 dev tun145 scope link linkdown rto_min lock 10ms <br>172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo iptables -L -n -t nat   <br>Chain PREROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>DOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL<br>CONNMARK   all  --  169.254.144.0/24     0.0.0.0/0            CONNMARK <span class="hljs-built_in">set</span> 0x90<br>CONNMARK   all  --  169.254.145.0/24     0.0.0.0/0            CONNMARK <span class="hljs-built_in">set</span> 0x91<br><br>Chain INPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br><br>Chain OUTPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>DOCKER     all  --  0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL<br><br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0           <br>MASQUERADE  tcp  --  172.17.0.2           172.17.0.2           tcp dpt:9001<br>MASQUERADE  tcp  --  172.17.0.2           172.17.0.2           tcp dpt:9000<br>MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0            connmark match  0x90<br>MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0            connmark match  0x91<br><br>Chain DOCKER (2 references)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>RETURN     all  --  0.0.0.0/0            0.0.0.0/0           <br>DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:9001 to:172.17.0.2:9001<br>DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:9000 to:172.17.0.2:9000<br></code></pre></td></tr></table></figure><ol start="4"><li>Debug打印</li></ol><p>可以加上TCPConnection状态打印函数，为了避免影响性能，存在DEBUG宏的时候编译，或者传给gcc<code>-DDEBUG</code>参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPConnectionDebugger</span> &#123;</span><br>      <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">bool</span> open_debugger&#123;<span class="hljs-literal">true</span>&#125;;<br><br>      <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">TCPConnectionDebugger</span>() : <span class="hljs-built_in">open_debugger</span>(<span class="hljs-literal">true</span>) &#123;&#125;<br>        ~<span class="hljs-built_in">TCPConnectionDebugger</span>() &#123;&#125;<br><br>        <span class="hljs-function">std::string <span class="hljs-title">color_1</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string &amp;data)</span> </span>&#123; <span class="hljs-keyword">return</span> data; &#125;<br><br>        <span class="hljs-function">std::string <span class="hljs-title">color_2</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string &amp;data)</span> </span>&#123; <span class="hljs-keyword">return</span> data; &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_segment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> TCPConnection &amp;that,</span></span><br><span class="hljs-params"><span class="hljs-function">                           <span class="hljs-keyword">const</span> TCPSegment &amp;seg,</span></span><br><span class="hljs-params"><span class="hljs-function">                           <span class="hljs-keyword">const</span> std::string &amp;desription,</span></span><br><span class="hljs-params"><span class="hljs-function">                           <span class="hljs-keyword">bool</span> check = <span class="hljs-literal">true</span>)</span> </span>&#123;<br>            <span class="hljs-built_in">DUMMY_CODE</span>(that, seg, desription, check);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; <span class="hljs-built_in">color_1</span>(desription) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            std::cerr &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Flag&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">header</span>().syn ? <span class="hljs-string">&quot;S&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">header</span>().fin ? <span class="hljs-string">&quot;F&quot;</span> : <span class="hljs-string">&quot;&quot;</span>)<br>                      &lt;&lt; (seg.<span class="hljs-built_in">header</span>().ack ? <span class="hljs-string">&quot;A&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">header</span>().rst ? <span class="hljs-string">&quot;R&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Sequnce Number&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">header</span>().seqno.<span class="hljs-built_in">raw_value</span>()) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Acknowledgement Number&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">header</span>().ackno) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Window Size&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">header</span>().win) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Payload&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">payload</span>().<span class="hljs-built_in">size</span>() ? seg.<span class="hljs-built_in">payload</span>().<span class="hljs-built_in">str</span>() : <span class="hljs-string">&quot;empty string&quot;</span>)<br>                      &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Payload Size&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">payload</span>().<span class="hljs-built_in">size</span>()) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Sequnce Space&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (seg.<span class="hljs-built_in">length_in_sequence_space</span>()) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;ackno of sender&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (that._sender.<span class="hljs-built_in">next_seqno_absolute</span>()) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;next seqno absolute of sender&quot;</span>) + <span class="hljs-string">&quot; : &quot;</span>) &lt;&lt; (that._sender.<span class="hljs-built_in">next_seqno_absolute</span>())<br>                      &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            std::cerr &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Active: &quot;</span>) + ((that._active) ? <span class="hljs-string">&quot;Y &quot;</span> : <span class="hljs-string">&quot;N&quot;</span>))<br>                      &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;  TIME_WAIT: &quot;</span>) + ((that._linger_after_streams_finish) ? <span class="hljs-string">&quot;Y\n&quot;</span> : <span class="hljs-string">&quot;N\n&quot;</span>));<br>            std::cerr &lt;&lt; (<span class="hljs-built_in">color_2</span>(<span class="hljs-string">&quot;Sender State: &quot;</span>)) &lt;&lt; that.<span class="hljs-built_in">state</span>().<span class="hljs-built_in">name</span>() &lt;&lt; std::endl;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>        &#125;<br>    &#125;;<br><br></code></pre></td></tr></table></figure><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ol><li>第一次实现的性能<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./apps/tcp_benchmark<br>CPU-limited throughput                : 2.65 Gbit/s<br>CPU-limited throughput with reordering: 1.45 Gbit/s<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CS144</tag>
      
      <tag>TCP/IP</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS144-Lab3实验笔记</title>
    <link href="/202205/cs144-lab3/"/>
    <url>/202205/cs144-lab3/</url>
    
    <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Lab3这个实验主要完成的是TCP发送端的功能。应用程序写入字节流到socket，TCP Sender负责将本端的字节流发送到对端。</p><p>具体地说，TCP Sender负责： </p><ul><li><p>根据对端的“接受窗口大小 + 期望收到的下一个字节”，来构造要发送的TCP报文头部和数据。</p></li><li><p>如果超出规定的时间后仍未收到一个已发送报文的应答，则需要重传这个报文。</p></li></ul><p>要实现的功能有：1. 如何构造要发送的TCP头部和数据；2. 处理对端对于发送报文的响应；3. 重传没有收到响应的报文</p><h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><h3 id="1-构造要发送的TCP头部和数据"><a href="#1-构造要发送的TCP头部和数据" class="headerlink" title="1. 构造要发送的TCP头部和数据"></a>1. 构造要发送的TCP头部和数据</h3><p>1.1 想发送数据需要先建立连接（也就是三次握手后才能发送数据）</p><blockquote><p>RFC 793定义的TCP不允许第一个SYN包携带数据，CS144按此实现。</p><p>但TCP Fast Open是允许第一个SYN包携带数据的。<br>参考<a href="https://lwn.net/Articles/508865/">TCP Fast Open: expediting web services</a></p></blockquote><p>1.2 建立连接后按照对端窗口大小减去已发送未被应答的部分，尽可能地用ByteStream内的数据填充TCP DataPayload。报文的序列号应该设置为“报文第一个字节的相对序列号”</p><p>1.3 如果本端ByteStream读到了EOF，并且本TCP报文可以再多携带一个字节，则发送FIN报文。</p><p>1.4 发送新建的报文时，记录这个报文以便重传，直到收到应答；更新下一次会发送的ByteStream用到的绝对序列号。</p><p>1.5 第一个SYN报文，假定对方窗口为1。</p><h3 id="2-对端对于发送报文的响应"><a href="#2-对端对于发送报文的响应" class="headerlink" title="2. 对端对于发送报文的响应"></a>2. 对端对于发送报文的响应</h3><p>对端响应的报文有两个字段需要发送方关心，</p><ul><li><code>ackno</code> 表示对端期望收到下一个数据包的序列号</li><li><code>win_size</code> 表示对端期望接受数据包的最大长度</li></ul><p>收到<code>ackno</code> 后先转换为基于<code>isn</code>的绝对序列号，如果新的绝对序列号小于本端的绝对序列号，说明收到了重复的确认，直接返回即可。</p><p>否则认为所有绝对序列号在新序列号之前的那些报文都已经成功地被对端接受了。</p><h3 id="3-重传没有收到响应的报文"><a href="#3-重传没有收到响应的报文" class="headerlink" title="3. 重传没有收到响应的报文"></a>3. 重传没有收到响应的报文</h3><p>这部分主要参考RFC6298 Section 5的算法实现，按照这个算法，在各个函数里面加一些逻辑即可～</p><p>这个RFC主要规定了TCP如何度量RTO（retransmission timeout），以及在经过一个RTO时间后如何进行重传的算法。</p><p>本实验主要关心如何实现重传算法，这部分内容在<a href="https://www.rfc-editor.org/rfc/rfc6298.html#section-5">Section 5</a>中描述。</p><p>下面给出大致翻译</p><blockquote><p>5.管理RTO计时器</p><p>对于一个重传计时器，<strong>必须满足不能过早地重传这个要求</strong>，也就是不能在小于一个RTO时间内进行重传。<br>以下是管理重传计时器的推荐算法：</p><p>5.1 每次发送包含数据的数据包时（这里的发送包括重传），如果计时器没有启动，则启动计时器。这样计时器才有可能在一个RTO时间后过期（指的是当前的RTO）</p><p>5.2 如果收到了所有“已发送但未被确认”数据的ACK报文后，关闭重传计时器</p><p>5.3 每次收到对新数据的ACK报文时，重启重传计时器，使其可以在一个RTO后过期（指的是当前的RTO）</p><p>当重传计时器过期后，执行如下操作<br>5.4 重传最早的”已发送但未被确认”的TCP段</p><p>5.5 主机（注，这里指TCP发送端）<strong>必须</strong>将新的RTO设置为当前RTO值的两倍。（RTO的上界在本RFC 2.5节中讨论了）</p><p>5.6 启动重传计时器，使其可以在一个RTO后过期（指的是当前的RTO）</p><p>5.7 如果在等待SYN-ACK这个TCP报文时候，重传计时器过期了，并且这个计时器的RTO小于3秒，则当数据传输开始的时候（即，三次握手完成后），RTO必须重新初始化为3秒</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>计时器的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetransTimer</span> &#123;</span><br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">uint32_t</span> _remaining_time&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">bool</span> _is_stopped&#123;<span class="hljs-literal">false</span>&#125;;<br>    <span class="hljs-keyword">bool</span> _is_expired&#123;<span class="hljs-literal">false</span>&#125;;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RetransTimer</span>() : _remaining_time(<span class="hljs-number">0</span>), _is_stopped(<span class="hljs-literal">true</span>), _is_expired(<span class="hljs-literal">false</span>) &#123;&#125;<br>    <span class="hljs-built_in">RetransTimer</span>(<span class="hljs-keyword">uint32_t</span> init_time, <span class="hljs-keyword">bool</span> stopped, <span class="hljs-keyword">bool</span> expired)<br>        : _remaining_time(init_time), _is_stopped(stopped), _is_expired(expired) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tick_to_retrans_timer</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> ms_since_last_tick)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (_is_stopped) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ms_since_last_tick &gt;= _remaining_time) &#123;<br>            _remaining_time = <span class="hljs-number">0</span>;<br>            _is_expired = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _remaining_time -= ms_since_last_tick;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_expired</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> _is_expired; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_stopped</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> _is_stopped; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start_new_timer</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> new_rto)</span> </span>&#123;<br>        _remaining_time = new_rto;<br>        _is_expired = <span class="hljs-literal">false</span>;<br>        _is_stopped = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop_retrans_timer</span><span class="hljs-params">()</span> </span>&#123;<br>        _is_stopped = <span class="hljs-literal">true</span>;<br>        _is_expired = <span class="hljs-literal">false</span>;<br>        _remaining_time = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>类内新增成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPSender</span> &#123;</span><br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//! Some TCP state flags send to the other side,</span><br>    <span class="hljs-keyword">bool</span> _syn_sent&#123;<span class="hljs-literal">false</span>&#125;;<br>    <span class="hljs-comment">//! When FIN is sent, it means that the data stream is closed on its own side, `fill_window` will return directly</span><br>    <span class="hljs-keyword">bool</span> _fin_sent&#123;<span class="hljs-literal">false</span>&#125;;<br>    <span class="hljs-comment">//! the receive windows size, from the other side</span><br>    <span class="hljs-keyword">uint16_t</span> _win_size&#123;<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-comment">//! Once the segment is filled the window(using the data payload), it will be sent to the other side</span><br>    <span class="hljs-comment">//! In this lab `send_segments` means move the segment to `_segments_out` FIFO and `_outstanding_segments` map</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send_segment</span><span class="hljs-params">(TCPSegment &amp;seg)</span></span>;<br>    <span class="hljs-comment">//! keep track of segments which have been sent but not yet acked by the receiver</span><br>    <span class="hljs-comment">//!@&#123;</span><br>    <span class="hljs-comment">// first-&gt; the absolute sequence number, it will be mono increased</span><br>    <span class="hljs-comment">// second-&gt; the outstanding tcp segment</span><br>    std::vector&lt;std::pair&lt;<span class="hljs-keyword">size_t</span>, TCPSegment&gt;&gt; _outstanding_segments&#123;&#125;;<br>    <span class="hljs-keyword">size_t</span> _outstanding_bytes&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-comment">// !@&#125;</span><br><br>    <span class="hljs-comment">//! our initial sequence number, the number for our SYN.</span><br>    WrappingInt32 _isn;<br><br>    <span class="hljs-comment">//! outbound queue of segments that the TCPSender wants sent</span><br>    std::queue&lt;TCPSegment&gt; _segments_out&#123;&#125;;<br><br>    <span class="hljs-comment">//! retransmission timer for the connection</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _initial_retransmission_timeout;<br>    RetransTimer _retrans_timer&#123;&#125;;<br>    <span class="hljs-comment">//! current retransmission timeout value, aka RTO</span><br>    <span class="hljs-keyword">uint64_t</span> _current_retransmission_timeout&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _consecutive_retransmission_cnt&#123;<span class="hljs-number">0</span>&#125;;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>方法实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//! \param[in] capacity the capacity of the outgoing byte stream</span><br><span class="hljs-comment">//! \param[in] retx_timeout the initial amount of time to wait before retransmitting the oldest outstanding segment</span><br><span class="hljs-comment">//! \param[in] fixed_isn the Initial Sequence Number to use, if set (otherwise uses a random ISN)</span><br>TCPSender::<span class="hljs-built_in">TCPSender</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> capacity, <span class="hljs-keyword">const</span> <span class="hljs-keyword">uint16_t</span> retx_timeout, <span class="hljs-keyword">const</span> std::optional&lt;WrappingInt32&gt; fixed_isn)<br>    : _isn(fixed_isn.<span class="hljs-built_in">value_or</span>(WrappingInt32&#123;<span class="hljs-built_in">random_device</span>()()&#125;))<br>    , _initial_retransmission_timeout&#123;retx_timeout&#125;<br>    , _stream(capacity) &#123;<br>    _current_retransmission_timeout = _initial_retransmission_timeout;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint64_t</span> <span class="hljs-title">TCPSender::bytes_in_flight</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> _outstanding_bytes; &#125;<br><br><span class="hljs-comment">//! \details set the segment header and payload, fill the other side receive window size as much as possible</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TCPSender::fill_window</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">size_t</span> receiver_win_size = _win_size ? _win_size : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ((receiver_win_size &gt; _outstanding_bytes) &amp;&amp; !_fin_sent) &#123;<br>        TCPSegment seg;<br>        <span class="hljs-keyword">if</span> (!_syn_sent) &#123;<br>            seg.<span class="hljs-built_in">header</span>().syn = <span class="hljs-literal">true</span>;<br>            _syn_sent = <span class="hljs-literal">true</span>;<br>        &#125;<br>        seg.<span class="hljs-built_in">header</span>().seqno = <span class="hljs-built_in">next_seqno</span>();<br><br>        <span class="hljs-comment">// the max bytes could this segment carried</span><br>        <span class="hljs-keyword">size_t</span> max_payload_size =<br>            <span class="hljs-built_in">min</span>(TCPConfig::MAX_PAYLOAD_SIZE, receiver_win_size - _outstanding_bytes - seg.<span class="hljs-built_in">header</span>().syn);<br>        string payload = _stream.<span class="hljs-built_in">read</span>(max_payload_size);<br>        seg.<span class="hljs-built_in">payload</span>() = <span class="hljs-built_in">Buffer</span>(std::<span class="hljs-built_in">move</span>(payload));<br>        <span class="hljs-comment">// send FIN flag if reached EOF of stream</span><br>        <span class="hljs-keyword">if</span> (!_fin_sent &amp;&amp; _stream.<span class="hljs-built_in">eof</span>() &amp;&amp; seg.<span class="hljs-built_in">length_in_sequence_space</span>() + _outstanding_bytes &lt; receiver_win_size) &#123;<br>            seg.<span class="hljs-built_in">header</span>().fin = <span class="hljs-literal">true</span>;<br>            _fin_sent = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (seg.<span class="hljs-built_in">length_in_sequence_space</span>()) &#123;<br>            <span class="hljs-built_in">send_segment</span>(seg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//! The segment here is NOT EMPTY (non zero length in sequence space)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TCPSender::send_segment</span><span class="hljs-params">(TCPSegment &amp;seg)</span> </span>&#123;<br>    _segments_out.<span class="hljs-built_in">push</span>(seg);<br>    _outstanding_segments.<span class="hljs-built_in">emplace_back</span>(_next_seqno, seg);<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> seg_length = seg.<span class="hljs-built_in">length_in_sequence_space</span>();<br>    _next_seqno += seg_length;<br>    _outstanding_bytes += seg_length;<br><br>    <span class="hljs-keyword">if</span> (_retrans_timer.<span class="hljs-built_in">is_stopped</span>()) &#123;<br>        _retrans_timer.<span class="hljs-built_in">start_new_timer</span>(_current_retransmission_timeout);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//! \param ackno The remote receiver&#x27;s ackno (acknowledgment number)</span><br><span class="hljs-comment">//! \param window_size The remote receiver&#x27;s advertised window size</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TCPSender::ack_received</span><span class="hljs-params">(<span class="hljs-keyword">const</span> WrappingInt32 ackno, <span class="hljs-keyword">const</span> <span class="hljs-keyword">uint16_t</span> window_size)</span> </span>&#123;<br>    <span class="hljs-comment">//! `absolute_ackno` is the number of bytes that the receiver received.</span><br>    <span class="hljs-comment">//! `_next_seqno` is the number of bytes that the sender wants to send, i.e. the last `absolute-seqno`</span><br>    <span class="hljs-keyword">size_t</span> absolute_ackno = <span class="hljs-built_in">unwrap</span>(ackno, _isn, _next_seqno);<br>    <span class="hljs-keyword">if</span> (absolute_ackno &gt; _next_seqno) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    _win_size = window_size;<br>    <span class="hljs-comment">//! Remove segments that have now been fully acknoledged segment in `_outstanding_segment`</span><br>    <span class="hljs-keyword">auto</span> iter = _outstanding_segments.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">bool</span> acked_new_data = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (!_outstanding_segments.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;seg = iter-&gt;second;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> seg_length = seg.<span class="hljs-built_in">length_in_sequence_space</span>();<br>        <span class="hljs-keyword">if</span> (iter-&gt;first + seg_length &lt;= absolute_ackno) &#123;<br>            <span class="hljs-comment">// erase returns the iterator following the last removed element.</span><br>            iter = _outstanding_segments.<span class="hljs-built_in">erase</span>(iter);<br>            _outstanding_bytes -= seg_length;<br>            acked_new_data = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//! When received a valid ackno, which means the receiver receipt of the new data</span><br>    <span class="hljs-comment">//! the retransmission timer will restart if there are outstanding segments (for the current value of RTO).,</span><br>    <span class="hljs-comment">//! otherwise the timer will stop</span><br>    <span class="hljs-keyword">if</span> (acked_new_data) &#123;<br>        _current_retransmission_timeout = _initial_retransmission_timeout;<br>        <span class="hljs-keyword">if</span> (!_outstanding_segments.<span class="hljs-built_in">empty</span>()) &#123;<br>            _retrans_timer.<span class="hljs-built_in">start_new_timer</span>(_current_retransmission_timeout);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _retrans_timer.<span class="hljs-built_in">stop_retrans_timer</span>();<br>        &#125;<br>        _consecutive_retransmission_cnt = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">fill_window</span>();<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//! \param[in] ms_since_last_tick the number of milliseconds since the last call to this method</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TCPSender::tick</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> ms_since_last_tick)</span> </span>&#123;<br>    _retrans_timer.<span class="hljs-built_in">tick_to_retrans_timer</span>(ms_since_last_tick);<br>    <span class="hljs-comment">// If the retrans_timer is expired, it will retransmit the earliest segment when the window size is not zero</span><br>    <span class="hljs-comment">// then double the RTO, restart a new timer.</span><br>    <span class="hljs-keyword">if</span> (_retrans_timer.<span class="hljs-built_in">is_expired</span>() &amp;&amp; !_outstanding_segments.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> iter = _outstanding_segments.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">if</span> (_win_size &gt; <span class="hljs-number">0</span>) &#123;<br>            _current_retransmission_timeout &lt;&lt;= <span class="hljs-number">1</span>;<br>            _consecutive_retransmission_cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (_consecutive_retransmission_cnt &lt;= TCPConfig::MAX_RETX_ATTEMPTS) &#123;<br>            _segments_out.<span class="hljs-built_in">push</span>(iter-&gt;second);<br>        &#125;<br>        _retrans_timer.<span class="hljs-built_in">start_new_timer</span>(_current_retransmission_timeout);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">TCPSender::consecutive_retransmissions</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> _consecutive_retransmission_cnt; &#125;<br><br><span class="hljs-comment">//! \details The segment with zero data and correct `seqno` is useful for `ACK` the other side.</span><br><span class="hljs-comment">// it will never be retransmitted, and doesn&#x27;t need to keep track.</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TCPSender::send_empty_segment</span><span class="hljs-params">()</span> </span>&#123;<br>    TCPSegment segment;<br>    segment.<span class="hljs-built_in">header</span>().seqno = <span class="hljs-built_in">next_seqno</span>();<br>    _segments_out.<span class="hljs-built_in">push</span>(segment);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>独立的重传计时器的确逻辑清晰很多，第一次实现的时候，发送报文的逻辑和计时器的逻辑混在一次，把我绕晕了。。。</li><li>重传计时器默认应该是关闭的，我第一次实现时候</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CS144</tag>
      
      <tag>TCP/IP</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS144-Lab2实验笔记</title>
    <link href="/202205/cs144-lab2/"/>
    <url>/202205/cs144-lab2/</url>
    
    <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>这个实验主要完成的是，TCP接受端应该如何工作，才能正确地将TCP Payload交付给socket的问题。</p><p>CS144 Lab实现的是这个场景：NIC从链路上收到MAC数据包，交给kernel；kernel解析MAC头后，将这个包传给虚拟的tun设备。CS144 Lab中的其他辅助函数从tun设备中读取IP包，拆包后将完整TCP报文交给<code>tcp_receiver/tcp_sender</code> 这两个我们自己写的程序。</p><p><code>tcp_sender</code> 负责：解析包头、将Payload交付给socket，这样应用程序就能从socket中读取数据了。</p><h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><h3 id="1-序列号与绝对序列号的相互转换"><a href="#1-序列号与绝对序列号的相互转换" class="headerlink" title="1. 序列号与绝对序列号的相互转换"></a>1. 序列号与绝对序列号的相互转换</h3><p>对于这个问题不必考虑SYN&#x2F;FIN是否计算的问题，因为二者都包含了SYN&#x2F;FIN</p><p>1.1 收到的TCP Header中<code>seqno</code>是对端表示其TCP报文内携带的Payload的序列号。</p><ul><li><p>将收到的第一个包（SYN包）携带的<code>seqno</code>称为“起始序列号”，通常是一个32位随机值</p></li><li><p>之后收到的包的<code>seqno</code>则表示当前包携带的Payload相对于“起始序列号”的偏移</p></li></ul><p>1.2 绝对序列号指的是当前包的<code>seqno</code>相对于起始序列号，实际的偏移</p><ul><li>这样就可以知道当前包Payload在乱序字节流里面的起始index了（绝对序列号转到stream index的时候才考虑忽略SYN的问题）</li></ul><p>1.3 绝对序列号转换为序列号</p><ul><li>绝对序列号加上起始序列号对2^32取模即可</li></ul><p>1.4 序列号转换为绝对序列号</p><p>(TODO)</p><h3 id="2-实现TCP接收端"><a href="#2-实现TCP接收端" class="headerlink" title="2. 实现TCP接收端"></a>2. 实现TCP接收端</h3><p>2.1 接收端根据收到TCP包头的<code>seqno + SYN_FLAG + FIN_FLAG + Payload</code> 这几个字段，决定本端的<code>ackno + win_size</code><br>如下图所示<br><img src="/img/cs144-pic/Lab2-TCP-hdr.png"></p><p>2.2 根据当前包的<code>seqno</code>得到绝对序列号，再得到<code>stream index</code></p><ul><li>将Payload按照<code>stream index</code>推到乱序字节流中。乱序如何重组为有序的问题Lab1中已经实现了。</li></ul><p>2.3 向对端响应<code>ackno</code></p><ul><li><code>ackno</code> 指的是本端期望收到下一个数据包的序列号。也就是已经收到的数据的<strong>有序</strong>字节长度加1</li></ul><p>2.4 向对端响应<code>window_size</code></p><ul><li><code>window_size</code> 指的是本端的接受窗口大小，对端按照收到的窗口大小来填充payload的字节数。具体到实验就是接收端乱序字节流的最大容量减去有序字节流中的字节数（已经重组但未被应用程序读取这部分）。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>TCPReceiver类内新增一些变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPReceiver</span> &#123;</span><br>    <span class="hljs-comment">//! Some TCP Flag received in the first and the last segment from other side</span><br>    <span class="hljs-keyword">bool</span> _syn&#123;<span class="hljs-literal">false</span>&#125;;<br>    <span class="hljs-keyword">bool</span> _fin&#123;<span class="hljs-literal">false</span>&#125;;<br>    WrappingInt32 _isn&#123;<span class="hljs-number">0</span>&#125;;<br><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>具体的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//  libsponge/tcp_receiver.cc </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TCPReceiver::segment_received</span><span class="hljs-params">(<span class="hljs-keyword">const</span> TCPSegment &amp;seg)</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;hdr = seg.<span class="hljs-built_in">header</span>();<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;data = seg.<span class="hljs-built_in">payload</span>();<br>    <span class="hljs-comment">// Not receive SYN yet</span><br>    <span class="hljs-keyword">if</span> (!_syn) &#123;<br>        <span class="hljs-keyword">if</span> (!hdr.syn) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _syn = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// the sequence number of the first segment is the initial sequence number</span><br>            _isn = hdr.seqno;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// NOW, received SYN from the other side</span><br>    <span class="hljs-keyword">if</span> (hdr.fin) &#123;<br>        _fin = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// the checkpoint should be the last absolute sequence number</span><br>    <span class="hljs-keyword">size_t</span> ckpt = <span class="hljs-built_in">stream_out</span>().<span class="hljs-built_in">bytes_written</span>() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">uint64_t</span> absolute_seqno = <span class="hljs-built_in">unwrap</span>(hdr.seqno, _isn, ckpt);<br>    <span class="hljs-comment">// In the first segment, the stream index should be 0, or this index should be absolute seqno minus 1</span><br>    <span class="hljs-keyword">uint64_t</span> stream_idx = absolute_seqno + <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">uint64_t</span>&gt;(hdr.syn) - <span class="hljs-number">1</span>;<br>    _reassembler.<span class="hljs-built_in">push_substring</span>(data.<span class="hljs-built_in">copy</span>(), stream_idx, _fin);<br>&#125;<br><br><span class="hljs-function">optional&lt;WrappingInt32&gt; <span class="hljs-title">TCPReceiver::ackno</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!_syn) &#123;<br>        <span class="hljs-keyword">return</span> nullopt;<br>    &#125;<br>    <span class="hljs-comment">// written bytes + SYN</span><br>    <span class="hljs-keyword">uint64_t</span> absolute_ackno = <span class="hljs-built_in">stream_out</span>().<span class="hljs-built_in">bytes_written</span>() + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// Only when there is no segment on the fly and receive the FIN flag, then the absolute seq should add 1</span><br>    absolute_ackno += (_fin &amp;&amp; _reassembler.<span class="hljs-built_in">unassembled_bytes</span>() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">wrap</span>(absolute_ackno, _isn);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">TCPReceiver::window_size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-comment">// the capacity minus the bytes have been reassembled, but not consumed</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;_capacity - <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">stream_out</span>().<span class="hljs-built_in">buffer_size</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS144</tag>
      
      <tag>TCP/IP</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS144-Lab1实验笔记</title>
    <link href="/202205/cs144-lab1/"/>
    <url>/202205/cs144-lab1/</url>
    
    <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Lab0中完成了有序字节流的写入和读出，这个实验需要完成乱序字节流的重组、写入和读出。也就是说，Lab1实验手册中的这幅图，蓝色和绿色部分我们已经在Lab0中完成了，我们在Lab1中只需要完成红色部分的重组即可。</p><p><img src="/img/cs144-pic/lab1-stream.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>(这个思路有很大的性能优化空间)</p><ol><li>使用map存储乱序字节流，<code>key=(起始下标，结束下标)</code>，均从0开始，<code>value=(字符串)</code>，<code>pair&lt;int,int&gt;</code>作为key的时候不需要自己写比较函数。</li><li>每当有新字符串push进来后，在map中确定要插入的位置（应该插入到low_bound返回的之前一个），不断判断当前字符串是否能合并之前一个键值对或者之后的一个。</li><li>如果当前map的第一个元素可以插入到有序字节流中，弹出完整的第一个元素，或者部分第一个元素。</li><li>只有当“当前不存在乱序字节，且已经收到了对端发来的EOF标志”，有序字节流的<code>end_of_input</code>才有效。有一种情况是，收到了对端发来的EOF标志（收到了FIN包），但是中间仍有未收到的片段（空洞），这时候有序字节流不能结束。</li><li>注意一些conner case，比如写入有序字节流的时候当前字符串不一定能全部写入。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>类内新增变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// libsponge/stream_reassembler.hh  </span><br><span class="hljs-keyword">size_t</span> _unassembled_bytes&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">size_t</span> _first_unassembled_index&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">bool</span> _eof&#123;<span class="hljs-literal">false</span>&#125;;<br><span class="hljs-comment">// key-&gt; &lt;start_idx, end_idx&gt;, value -&gt; str_to_assembled</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">recv_bytes_t</span> = pair&lt;pair&lt;<span class="hljs-keyword">size_t</span>, <span class="hljs-keyword">size_t</span>&gt;, std::string&gt;;<br>map&lt;pair&lt;<span class="hljs-keyword">size_t</span>, <span class="hljs-keyword">size_t</span>&gt;, std::string&gt; _str_to_assemble;<br><br>ByteStream _output;  <span class="hljs-comment">//!&lt; The reassembled in-order byte stream</span><br><span class="hljs-keyword">size_t</span> _capacity;    <span class="hljs-comment">//!&lt; The maximum number of bytes</span><br><br><span class="hljs-function"><span class="hljs-keyword">recv_bytes_t</span> <span class="hljs-title">merge_two_unassembled_strs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">recv_bytes_t</span> &amp;a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">recv_bytes_t</span> &amp;b)</span> <span class="hljs-keyword">const</span></span>;<br></code></pre></td></tr></table></figure><p><code>push_string</code> 方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//! \details This function accepts a substring (aka a segment) of bytes,</span><br><span class="hljs-comment">//! possibly out-of-order, from the logical stream, and assembles any newly</span><br><span class="hljs-comment">//! contiguous substrings and writes them into the output stream in order.</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StreamReassembler::push_substring</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;data, <span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> index, <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> eof)</span> </span>&#123;<br>    <span class="hljs-keyword">size_t</span> cur_win_max_idx = _first_unassembled_index + _capacity - _output.<span class="hljs-built_in">buffer_size</span>();<br>    <span class="hljs-keyword">if</span> (index &gt;= cur_win_max_idx)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (eof) &#123;<br>        _eof = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// cut the chars which are out of window or have been assembled</span><br>    <span class="hljs-keyword">size_t</span> data_start_idx = <span class="hljs-built_in">max</span>(index, _first_unassembled_index);<br>    <span class="hljs-keyword">size_t</span> data_end_idx = <span class="hljs-built_in">min</span>(cur_win_max_idx, index + data.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">if</span> (data_end_idx &gt;= data_start_idx) &#123;<br>        pair&lt;<span class="hljs-keyword">size_t</span>, <span class="hljs-keyword">size_t</span>&gt; cur_data_start_end_index = <span class="hljs-built_in">make_pair</span>(data_start_idx, data_end_idx);<br>        string cur_data = data.<span class="hljs-built_in">substr</span>(data_start_idx - index, data_end_idx - data_start_idx + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// insert current data to str_to_assemble map</span><br>        <span class="hljs-keyword">recv_bytes_t</span> cur_recv_bytes = &#123;cur_data_start_end_index, cur_data&#125;;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">auto</span> iter = _str_to_assemble.<span class="hljs-built_in">lower_bound</span>(cur_data_start_end_index);<br>            <span class="hljs-keyword">bool</span> cur_data_could_merge_right =<br>                (iter != _str_to_assemble.<span class="hljs-built_in">end</span>()) &amp;&amp; (cur_recv_bytes.first.second &gt;= iter-&gt;first.first);<br>            <span class="hljs-keyword">if</span> (cur_data_could_merge_right) &#123;<br>                cur_recv_bytes = <span class="hljs-built_in">merge_two_unassembled_strs</span>(cur_recv_bytes, *iter);<br>                _unassembled_bytes -= iter-&gt;second.<span class="hljs-built_in">size</span>();<br>                _str_to_assemble.<span class="hljs-built_in">erase</span>(iter);<br>                iter = _str_to_assemble.<span class="hljs-built_in">lower_bound</span>(cur_data_start_end_index);<br>            &#125;<br><br>            <span class="hljs-keyword">bool</span> cur_data_could_merge_left =<br>                (iter != _str_to_assemble.<span class="hljs-built_in">begin</span>()) &amp;&amp; ((--iter)-&gt;first.second &gt;= cur_recv_bytes.first.first);<br>            <span class="hljs-keyword">if</span> (cur_data_could_merge_left) &#123;<br>                cur_recv_bytes = <span class="hljs-built_in">merge_two_unassembled_strs</span>(*iter, cur_recv_bytes);<br>                _unassembled_bytes -= iter-&gt;second.<span class="hljs-built_in">size</span>();<br>                _str_to_assemble.<span class="hljs-built_in">erase</span>(iter);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!cur_data_could_merge_right &amp;&amp; !cur_data_could_merge_left) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// insert the unassembled str to map</span><br>        _str_to_assemble.<span class="hljs-built_in">insert</span>(cur_recv_bytes);<br>        _unassembled_bytes += cur_recv_bytes.second.<span class="hljs-built_in">size</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// if the first chunk start index is smaller than _first_unassembled_index</span><br>    <span class="hljs-comment">// write the first chunk to output bytestream</span><br>    <span class="hljs-keyword">auto</span> iter = _str_to_assemble.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">if</span> (!_str_to_assemble.<span class="hljs-built_in">empty</span>() &amp;&amp; (iter-&gt;first.first &lt;= _first_unassembled_index)) &#123;<br>        <span class="hljs-keyword">auto</span> temp_map_head = *iter;<br>        _str_to_assemble.<span class="hljs-built_in">erase</span>(iter);<br>        <span class="hljs-keyword">size_t</span> written_len = _output.<span class="hljs-built_in">write</span>(temp_map_head.second);<br>        _unassembled_bytes -= written_len;<br>        <span class="hljs-keyword">if</span> (written_len == temp_map_head.second.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-comment">// The first chunk was all written to the output stream</span><br>            _first_unassembled_index = temp_map_head.first.first + temp_map_head.second.<span class="hljs-built_in">size</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Part of first chunk was written to the output stream</span><br>            <span class="hljs-keyword">size_t</span> new_data_start_index = temp_map_head.first.first + written_len;<br>            _str_to_assemble.<span class="hljs-built_in">insert</span>(<br>                &#123;&#123;new_data_start_index, temp_map_head.first.second&#125;, temp_map_head.second.<span class="hljs-built_in">substr</span>(written_len)&#125;);<br>            _first_unassembled_index = new_data_start_index;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>() &amp;&amp; _eof) &#123;<br>        _output.<span class="hljs-built_in">end_input</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//! \details This function merge two recv_bytes_type pairs, the start index of a is always smaller than b.</span><br><span class="hljs-function">StreamReassembler::<span class="hljs-keyword">recv_bytes_t</span> <span class="hljs-title">StreamReassembler::merge_two_unassembled_strs</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> StreamReassembler::<span class="hljs-keyword">recv_bytes_t</span> &amp;a,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> StreamReassembler::<span class="hljs-keyword">recv_bytes_t</span> &amp;b)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-keyword">recv_bytes_t</span> res;<br>    res.first.first = a.first.first;<br>    <span class="hljs-comment">// choose the bigger one for the end index of merged string.</span><br>    <span class="hljs-keyword">if</span> (a.first.second &gt; b.first.second) &#123;<br>        res.first.second = a.first.second;<br>        res.second = a.second;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.first.second = b.first.second;<br>        res.second = a.second.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, b.first.first - a.first.first) + b.second;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CS144</tag>
      
      <tag>TCP/IP</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS144-实验环境搭建和Lab0</title>
    <link href="/202205/cs144-lab0/"/>
    <url>/202205/cs144-lab0/</url>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ol><li>这次打算用 Jetbrains Gateway进行远程开发。按照 CS144 README 进行远端Clion的配置。注意环境变量和编译时传给cmake的宏的设置。<br><img src="/img/cs144-pic/lab0-clion-debug.png"></li><li>安装TcpDump，最好从Github的源码编译安装，5.0版本后的tcpdump可以保存pcap文件中同时输出到标准输出流中。</li></ol><h2 id="实验0"><a href="#实验0" class="headerlink" title="实验0"></a>实验0</h2><p>使用TCPsocket和一个webserver（对端监听80端口）进行通信，类似于curl。</p><p>代码十分简单，按照socket通信流程编写即可。lab0仅完成下图中描述的TCP客户端流程即可</p><blockquote><p><img src="/img/cs144-pic/socket-client&server.png"></p><p>图片来源微信公众号<a href="https://mp.weixin.qq.com/s/Ytw_N5zeLH50ItdgAsv3nA">Linux fd 系列 — socket fd 是什么？</a></p></blockquote><p>下面给出我的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_URL</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;host, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;path)</span> </span>&#123;<br>    <span class="hljs-comment">// Your code here.</span><br><br>    <span class="hljs-comment">// You will need to connect to the &quot;http&quot; service on</span><br>    <span class="hljs-comment">// the computer whose name is in the &quot;host&quot; string,</span><br>    <span class="hljs-comment">// then request the URL path given in the &quot;path&quot; string.</span><br>    TCPSocket sock&#123;&#125;;<br>    sock.connect(Address(host, <span class="hljs-string">&quot;http&quot;</span>));<br>    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">input_str</span><span class="hljs-params">(<span class="hljs-string">&quot;GET &quot;</span> + path + <span class="hljs-string">&quot; HTTP/1.1\r\nHost: &quot;</span> + host + <span class="hljs-string">&quot;\r\n\r\n&quot;</span>)</span></span>;<br>    sock.write(input_str);<br><br>    <span class="hljs-comment">// Then you&#x27;ll need to print out everything the server sends back,</span><br>    <span class="hljs-comment">// (not just one call to read() -- everything) until you reach</span><br>    <span class="hljs-comment">// the &quot;eof&quot; (end of file).</span><br>    sock.shutdown(SHUT_WR);<br>    <span class="hljs-keyword">while</span> (!sock.eof())<br>        <span class="hljs-built_in">cout</span> &lt;&lt; sock.read();<br>    sock.close();<br>    <span class="hljs-comment">// cerr &lt;&lt; &quot;Function called: get_URL(&quot; &lt;&lt; host &lt;&lt; &quot;, &quot; &lt;&lt; path &lt;&lt; &quot;).\n&quot;;</span><br>    <span class="hljs-comment">// cerr &lt;&lt; &quot;Warning: get_URL() has not been implemented yet.\n&quot;;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li><p>如果使用Clion的话，需要先build All Test，再运行相关测试。测试的那些target只运行测试不进行编译链接</p></li><li><p>进行抓包测试。  我的客户端是先半关闭，再一点点读对端发来的数据。抓到的包也反映了这一点</p><p> 如果使用5.0版本的tcpdump的话，可以使用–print参数。否则只能先保存，再查看。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tcpdump  -i any -ent host cs144.keithw.org -w ./pcap/lab0.pcap<br></code></pre></td></tr></table></figure><p><img src="/img/cs144-pic/lab0-pcap.png"></p><blockquote><p>这里使用了Vscode Crumbs插件用来在Vscode中看pcap包</p></blockquote><h2 id="附：CS144代码风格"><a href="#附：CS144代码风格" class="headerlink" title="附：CS144代码风格"></a>附：CS144代码风格</h2><p>CS144 使用 C++11 标准完成实验，它对C++代码的风格有着严格的限制：</p><ul><li><p>使用 Resource acquisition is initialization 风格，即 RAII 风格。</p></li><li><p>禁止使用 malloc 和 free 函数</p></li><li><p>禁止使用 new 和 delete 关键字</p></li><li><p>禁止使用原生指针（*）。若有必要，最好使用智能指针（unique_ptr等等）。(该实验没有必要用到指针)。</p></li><li><p>禁止使用模板、线程相关、各类锁机制以及虚函数</p></li><li><p>禁止使用 C 风格字符串(char*) 以及 C 风格字符串处理函数。使用 string 来代替。</p></li><li><p>禁止使用 C 风格强制类型转换。若有必要请使用 static_cast</p></li><li><p>传递参数给函数时，请使用常量引用类型（const Ty&amp; t）</p></li><li><p>尽可能将每个变量和函数方法都声明成 const</p></li><li><p>禁止使用全局变量，以及尽可能让每个变量的作用域最小</p></li><li><p>在完成代码后，务必使用 make format 来标准化代码风格。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CS144</tag>
      
      <tag>TCP/IP</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmux配置与美化</title>
    <link href="/202107/tmux-tutorial/"/>
    <url>/202107/tmux-tutorial/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了我目前使用的Tmux配置。一来是目前的配置用着还算舒服，写此文安利一下；二来也记录一下键位映射，以做备忘。</p><p><a href="https://github.com/Gwzlchn/dotConfig/tree/master/tmux">我的Tmux配置目录</a></p><h2 id="Oh-My-Tmux"><a href="#Oh-My-Tmux" class="headerlink" title="Oh-My-Tmux"></a>Oh-My-Tmux</h2><p>目前我用的配置是基于<a href="https://github.com/gpakosz/.tmux"><code>Oh-My-Tmux</code></a>项目改造的。在这个项目上我进行了一些配色的改变（原生的黑白红是在欣赏不起来），最终效果如下图1所示，环境为<code>Windows Terminal + WSL2 + Tmux 3.0a</code><br><img src="/img/2021-07-19-tmux-tutorial/tmux-nord.png" alt="图1：Tmux效果图"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置文件的安装<br><em><strong>这里是对oh-my-tmux的安装流程复述</strong></em></p><ul><li><p>前置条件</p><ul><li><code>Tmux</code>版本大于等于2.4。Tmux的版本可以通过<code>tmux -V</code>命令查看。</li><li>预装awk、perl、sed工具</li><li><code>$TERM</code>变量必须设置为<code>xterm-256color</code>。这个变量是在<code>~/.bashrc</code>中设置的，<code>echo $TERM</code>可以检查。</li></ul></li><li><p>安装配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/Gwzlchn/dotConfig.git<br>$ ln -s -f ~/dotConfig/tmux/.tmux.conf<br>$ cp ~/dotConfig/tmux/.tmux.conf.local .<br></code></pre></td></tr></table></figure></li></ul></li><li><p>字体的安装<br>本配置文件中的一些符号图标的显示依赖<code>Nerd Font</code>字体，所以需要在终端软件所在的系统中安装<code>Nerd Font</code>字体。   </p><p><code>Nerd Font</code>并不是一种字体，而是在原有字体上增加了一些Unicode符号的一个字体补丁。你既可以选择手动为自己目前用的字体打上<code>Nerd Font</code>补丁（参考<a href="https://zhuanlan.zhihu.com/p/150097941">使用nerd-font&#x2F;font-patcher为字体添加字体图标</a>），也可以在<a href="https://www.nerdfonts.com/font-downloads">Nerd Font Download</a>页面下载打好补丁后的字体。我用的是<code>FiraCode NerdFont</code>，这个字体看起来比较纤细，同时带连字符效果。  </p><p>我目前用的终端是<code>Windows Terminal</code>,Windows安装字体比较简单，点开字体安装即可。之后需要将终端软件配置为刚刚安装的字体。打开<code>Windows Terminal</code>的配置文件<code>settings.json</code>，在<code>profiles.defaults</code>字段下增加<code>&quot;fontFace&quot;: xxxx</code>这个属性。如下所示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"> <span class="hljs-string">&quot;profiles&quot;</span>:<br> &#123;<br>     <span class="hljs-attr">&quot;defaults&quot;</span>:<br>     &#123;<br>         <span class="hljs-comment">// Put settings here that you want to apply to all profiles.</span><br>         <span class="hljs-comment">// &quot;colorScheme&quot;: &quot;Dracula&quot;,</span><br>         <span class="hljs-comment">//&quot;acrylicOpacity&quot; : 0.4,</span><br>         <span class="hljs-attr">&quot;useAcrylic&quot;</span> : <span class="hljs-literal">true</span>,<br>         <span class="hljs-attr">&quot;fontSize&quot;</span>:<span class="hljs-number">13</span>,<br>         <span class="hljs-attr">&quot;fontFace&quot;</span>: <span class="hljs-string">&quot;FiraCode Nerd Font&quot;</span>,<br>         <span class="hljs-attr">&quot;startingDirectory&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br>         <span class="hljs-attr">&quot;bellStyle&quot;</span>:<span class="hljs-string">&quot;none&quot;</span><br>     &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果完成了上述的安装流程，那么你在<code>Windows Terminal</code>中进入<code>WSL2</code>环境后，输入<code>tmux</code>应该就可以看到图1的效果了。</p></li></ol><h2 id="键位映射"><a href="#键位映射" class="headerlink" title="键位映射"></a>键位映射</h2><p>Tmux另一个迷人之处在于你可以用纯键盘来控制终端窗口的增删查改、甚至是缩放与恢复(<del>1.意味着极大概率会碰到Tmux快捷键与其他软件冲突的情况。2.意味着我经常记不住冷门的快捷键映射</del>。3.意味着你可以套用VIM的键位映射，但这里我没有用，<del>因为我不熟VIM</del>)。</p><p><strong>一些键位符号的约定</strong></p><ol><li><code>&lt;prefix&gt;</code> 表示前缀键，需要同时按<code>Ctrl + b</code>触发。按下之后状态栏会有提示，表示等待后续按键的输入（Oh-my-tmux效仿Screen，将<code>Ctrl+a</code>也映射成了前缀键，但会和<code>Qemu</code>冲突，故我这里取消了这个映射）</li><li><code>&lt;prefix&gt; c</code> 表示新建一个窗口，需要先同时按<code>Ctrl + b</code>，再按<code>c</code>键触发。</li><li><code>&lt;prefix&gt; C-c</code> 表示新建一个会话，需要先同时按<code>Ctrl + b</code>，再同时按<code>Ctrl - c</code>键触发。</li><li><code>&lt;CR&gt;</code>表示回车</li></ol><table><thead><tr><th>键位映射</th><th>动作</th><th>备注</th></tr></thead><tbody><tr><td><code>&lt;prefix&gt; e</code></td><td>编辑<code>~/.tmux.conf.local</code>配置文件</td><td></td></tr><tr><td><code>&lt;prefix&gt; r</code></td><td>重新加载<code>~/.tmux.conf.local</code>配置</td><td></td></tr><tr><td><code>&lt;prefix&gt; C-c</code></td><td>新建一个Session</td><td></td></tr><tr><td><code>&lt;prefix&gt; c</code></td><td>新建一个Window</td><td></td></tr><tr><td><code>&lt;prefix&gt; $</code></td><td>重命名当前Session</td><td></td></tr><tr><td><code>&lt;prefix&gt; ,</code></td><td>重命名当前Window</td><td></td></tr><tr><td><code>&lt;prefix&gt; %</code></td><td>新建一个垂直方向的Panel</td><td></td></tr><tr><td><code>&lt;prefix&gt; _</code> (下划线)</td><td>同上</td><td></td></tr><tr><td><code>&lt;prefix&gt; “</code></td><td>新建一个水平方向的Panel</td><td></td></tr><tr><td><code>&lt;prefix&gt; -</code> (减号)</td><td>同上</td><td></td></tr><tr><td><code>&lt;prefix&gt; w</code></td><td>查看所有打开的Session和Windows</td><td>可以通过<code>j/k &lt;CR&gt;</code>来跳转</td></tr><tr><td><code>&lt;prefix&gt;  + Up/Left/Down/Right</code></td><td>更改一个Window内Panel大小</td><td>按方向键的时候，<code>&lt;prefix&gt;</code>不要松开</td></tr><tr><td><code>&lt;prefix&gt; h/j/k/l</code></td><td>在一个Window内切换到不同的Panel中</td><td>使用方向键亦可，按方向键的时候，<code>&lt;prefix&gt;</code>需要松开</td></tr><tr><td><code>&lt;prefix&gt; &lt;</code>&#x2F;<code>&lt;prefix&gt; &gt;</code></td><td>交换两个Panel的位置</td><td></td></tr><tr><td><code>&lt;prefix&gt; C-h</code>&#x2F;<code>&lt;prefix&gt; C-l</code></td><td>在一个Session内的不同Window中切换</td><td>默认的<code>&lt;prefix&gt; n/p</code>切换方式已解绑</td></tr><tr><td><code>&lt;prefix&gt; +</code></td><td>将当前Panel最大化成为一个Window，或者恢复一个Window为Panel</td><td><strong>这个是Oh-My-Tmux最有用的功能</strong></td></tr><tr><td><code>&lt;prefix&gt; m</code></td><td>Tmux鼠标模式开关</td><td>默认开</td></tr><tr><td><code>&lt;prefix&gt; &lt;CR&gt;</code>&#x2F;<code>&lt;prefix&gt; [</code></td><td>进入Tmux 复制模式</td><td></td></tr><tr><td>Copy Mode <code>q</code></td><td>退出复制模式</td><td>在复制模式下</td></tr><tr><td>Copy Mode <code>C-Space</code></td><td>开始复制</td><td>同上</td></tr><tr><td>Copy Mode <code>C-w</code></td><td>将选中内容复制到Tmux Buffer中</td><td>同上</td></tr><tr><td><code>&lt;prefix&gt; p</code>&#x2F;<code>&lt;prefix&gt; ]</code></td><td>将最新的Tmux Buffer中的内容粘贴到终端中</td><td></td></tr><tr><td><code>&lt;prefix&gt; P</code></td><td>选择任意Tmux Buffer中的内容粘贴到终端中</td><td></td></tr><tr><td><code>&lt;prefix&gt; b</code></td><td>查看目前所有的Tmux Buffer中的内容</td><td></td></tr></tbody></table><h2 id="美化Tmux"><a href="#美化Tmux" class="headerlink" title="美化Tmux"></a>美化Tmux</h2><p>Oh-My-Tmux给了较大的美化空间，如图2所示。四个方框依次对应的是1.status left, 2.window status, 3.window current status, 4.status right。清楚了这个对应关系，再看<code>~/.tmux.conf.local</code>中的内容就很清楚了。右侧状态栏比较好的一点是，当你使用的SSH登录到远程主机时，username和hostname也会随之改变。</p><p>配色方案我这里选用的是<a href="https://www.nordtheme.com/docs/colors-and-palettes">Nord Color Scheme</a><br><img src="/img/2021-07-19-tmux-tutorial/tmux-statusbar.png" alt="图2：Tmux状态栏效果"></p><p>最后附上我目前用的状态栏配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs config"># window status style<br>#   - built-in variables are:<br>#     - #&#123;circled_window_index&#125;<br>#     - #&#123;circled_session_name&#125;<br>#     - #&#123;hostname&#125;<br>#     - #&#123;hostname_ssh&#125;<br>#     - #&#123;hostname_full&#125;<br>#     - #&#123;hostname_full_ssh&#125;<br>#     - #&#123;username&#125;<br>#     - #&#123;username_ssh&#125;<br>tmux_conf_theme_window_status_fg=$nord5             <br>tmux_conf_theme_window_status_bg=$nord1              <br>tmux_conf_theme_window_status_attr=&quot;none&quot;<br>tmux_conf_theme_window_status_format=&quot;#I #W&quot;<br><br># window current status style<br>#   - built-in variables are:<br>#     - #&#123;circled_window_index&#125;<br>#     - #&#123;circled_session_name&#125;<br>#     - #&#123;hostname&#125;<br>#     - #&#123;hostname_ssh&#125;<br>#     - #&#123;hostname_full&#125;<br>#     - #&#123;hostname_full_ssh&#125;<br>#     - #&#123;username&#125;<br>#     - #&#123;username_ssh&#125;<br>#   ﲵ            ﮊ ﮏ ♥ ﰸ ﯅  <br>tmux_conf_theme_window_status_current_fg=$nord6      <br>tmux_conf_theme_window_status_current_bg=$nord10 <br>tmux_conf_theme_window_status_current_attr=&quot;bold&quot;<br>tmux_conf_theme_window_status_current_format=&quot; #W&quot;<br><br># window activity status style<br>tmux_conf_theme_window_status_activity_fg=&quot;default&quot;<br>tmux_conf_theme_window_status_activity_bg=&quot;default&quot;<br>tmux_conf_theme_window_status_activity_attr=&quot;underscore&quot;<br><br># window bell status style<br>tmux_conf_theme_window_status_bell_fg=&#x27;#ffff00&#x27; <br>tmux_conf_theme_window_status_bell_bg=&quot;default&quot;<br>tmux_conf_theme_window_status_bell_attr=&quot;blink,bold&quot;<br><br># window last status style<br>tmux_conf_theme_window_status_last_fg=&quot;default&quot;<br>tmux_conf_theme_window_status_last_bg=&quot;default&quot;<br>tmux_conf_theme_window_status_last_attr=&quot;none&quot;<br>tmux_conf_theme_window_status_last_format=&#x27;#I #W-&#x27;<br><br># status left/right content:<br>#   - separate main sections with &quot;|&quot;<br>#   - separate subsections with &quot;,&quot;<br>#   - built-in variables are:<br>#     - #&#123;battery_bar&#125;<br>#     - #&#123;battery_hbar&#125;<br>#     - #&#123;battery_percentage&#125;<br>#     - #&#123;battery_status&#125;<br>#     - #&#123;battery_vbar&#125;<br>#     - #&#123;circled_session_name&#125;<br>#     - #&#123;hostname_ssh&#125;<br>#     - #&#123;hostname&#125;<br>#     - #&#123;hostname_full&#125;<br>#     - #&#123;hostname_full_ssh&#125;<br>#     - #&#123;loadavg&#125;<br>#     - #&#123;mouse&#125;<br>#     - #&#123;pairing&#125;<br>#     - #&#123;prefix&#125;<br>#     - #&#123;root&#125;<br>#     - #&#123;synchronized&#125;<br>#     - #&#123;uptime_y&#125;<br>#     - #&#123;uptime_d&#125; (modulo 365 when #&#123;uptime_y&#125; is used)<br>#     - #&#123;uptime_h&#125;<br>#     - #&#123;uptime_m&#125;<br>#     - #&#123;uptime_s&#125;<br>#     - #&#123;username&#125;<br>#     - #&#123;username_ssh&#125;<br>tmux_conf_theme_status_left=&quot;  #S &quot;<br>#tmux_conf_theme_status_right=&quot;#&#123;prefix&#125;#&#123;mouse&#125;#&#123;pairing&#125;#&#123;synchronized&#125;#&#123;?battery_status,#&#123;battery_status&#125;,&#125;#&#123;?battery_bar, #&#123;battery_bar&#125;,&#125;#&#123;?battery_percentage, #&#123;battery_percentage&#125;,&#125; , %R , %d %b | #&#123;username&#125;#&#123;root&#125; | #&#123;hostname&#125; &quot;<br>tmux_conf_theme_status_right=&#x27;#&#123;prefix&#125;#&#123;pairing&#125;#&#123;synchronized&#125;#&#123;?battery_bar, #&#123;battery_bar&#125;,&#125;#&#123;?battery_percentage, #&#123;battery_percentage&#125;,&#125;#&#123;?battery_status,#&#123;battery_status&#125;,&#125; | %b %d | %R | <br>tmux_conf_theme_status_left_fg=$nord5 # &#x27;#e4e4e4,#e4e4e4,#e4e4e4&#x27;  # black, white , white<br>tmux_conf_theme_status_left_bg=$nord0 #&#x27;,#00afff&#x27;  # yellow, pink, white blue<br>tmux_conf_theme_status_left_attr=&#x27;bold,none,none&#x27;<br><br># status right style<br>#tmux_conf_theme_status_right_fg=&quot;$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14&quot;<br>#tmux_conf_theme_status_right_bg=&quot;$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17&quot;<br>tmux_conf_theme_status_right_fg=$nord4,$nord6,$nord6,$nord5,$nord5<br>tmux_conf_theme_status_right_bg=$nord1,$nord7,$nord10,$nord2,$nord1 # dark gray, red, white<br>tmux_conf_theme_status_right_attr=&#x27;bold,none,bold,none,none,none&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tmux</tag>
      
      <tag>dotConfig</tag>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[MIT-6.S081/Fall2020] 实验笔记零 Lab0: Preparation</title>
    <link href="/202106/6-s081-lab0/"/>
    <url>/202106/6-s081-lab0/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>为了更好地理解RISC-V指令集，也为了熟悉QEMU，所以选择刷一遍MIT-6.S081的实验。希望不仅仅以做Lab为目的，同时也精读几篇OS领域经典文章。</p><hr><p><strong>可能好多人都卡在环境准备上，但后来我发现：趁早动手做实验，比准备环境更重要~</strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参考 6.S081 官方的配置教程：<a href="https://pdos.csail.mit.edu/6.S081/2020/tools.html">Tools</a></p><p>本人用的环境是基于<code>Qemu(KVM)</code>上的<code>Ubuntu 20.04</code>。</p><p>首先安装RISC-V工具链、GDB-Multiarch、QEMU：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu  binutils-riscv64-linux-gnu gcc-riscv64-unknown-elf<br><br><span class="hljs-comment"># fix qemu</span><br>sudo apt-get remove qemu-system-misc<br>sudo apt-get install qemu-system-misc=1:4.2-3ubuntu6<br></code></pre></td></tr></table></figure><p>检查一遍自己的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ riscv64-linux-gnu-gcc --version<br>riscv64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0<br>Copyright (C) 2019 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br><br>$ qemu-system-riscv64 --version<br>QEMU emulator version 4.2.0 (Debian 1:4.2-3ubuntu6)<br>Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers<br><br>$ riscv64-unknown-elf-gcc --version<br>riscv64-unknown-elf-gcc () 9.3.0<br>Copyright (C) 2019 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></td></tr></table></figure><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>能在<code>QEMU</code>中启动<code>xv6</code>，环境就算准备完了，可以动手做实验了~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2020<br>Cloning into <span class="hljs-string">&#x27;xv6-labs-2020&#x27;</span>...<br>...<br>$ <span class="hljs-built_in">cd</span> xv6-labs-2020<br>$ git checkout util<br>Branch <span class="hljs-string">&#x27;util&#x27;</span> <span class="hljs-built_in">set</span> up to track remote branch <span class="hljs-string">&#x27;util&#x27;</span> from <span class="hljs-string">&#x27;origin&#x27;</span>.<br>Switched to a new branch <span class="hljs-string">&#x27;util&#x27;</span><br><br>$ make qemu<br>···<br>xv6 kernel is booting<br><br>hart 2 starting<br>hart 1 starting<br>init: starting sh<br>$ ls<br>.              1 1 1024<br>..             1 1 1024<br>README         2 2 2059<br>xargstest.sh   2 3 93<br>cat            2 4 24256<br><span class="hljs-built_in">echo</span>           2 5 23080<br>(...other files)<br><br></code></pre></td></tr></table></figure><p>退出 <code>QEMU</code> 快捷键是 <code>Ctrl-a + x</code></p><p>好了，我们现在可以动手做实验了。</p><h2 id="如何在-QEMU-中使用-gdb"><a href="#如何在-QEMU-中使用-gdb" class="headerlink" title="如何在 QEMU 中使用 gdb"></a>如何在 <code>QEMU</code> 中使用 <code>gdb</code></h2><ol><li><p>首先用 <code>tmux</code> 开两个终端窗口。</p></li><li><p>第一个窗口键入<code>make qemu-gdb</code>.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make qemu-gdb<br>*** Now run <span class="hljs-string">&#x27;gdb&#x27;</span> <span class="hljs-keyword">in</span> another window. qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -drive file=fs.img,<span class="hljs-keyword">if</span>=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 -S -gdb tcp::26000<br></code></pre></td></tr></table></figure></li><li><p>在第二个窗口中:<br>3.1. 修改自己 <code>home</code> 目录下的 <code>.gdbinit</code> 文件，允许 <code>gdb</code> 在<code>xv6-labs-2020</code>这个目录启动的时候，加载该文件夹下的 <code>.gdbinit</code> 文件。 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path <span class="hljs-subst">$(pwd)</span>/.gdbinit &quot;</span> &gt;&gt; ~/.gdbinit<br></code></pre></td></tr></table></figure><p> 3.2. 启动 <code>gdb-multiarch</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb-multiarch      <br>GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2<br>Copyright (C) 2020 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.ht<br>ml&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type <span class="hljs-string">&quot;show copying&quot;</span> and <span class="hljs-string">&quot;show warranty&quot;</span> <span class="hljs-keyword">for</span> details.<br>This GDB was configured as <span class="hljs-string">&quot;x86_64-linux-gnu&quot;</span>.<br>Type <span class="hljs-string">&quot;show configuration&quot;</span> <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For <span class="hljs-built_in">help</span>, <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span>.<br>Type <span class="hljs-string">&quot;apropos word&quot;</span> to search <span class="hljs-keyword">for</span> commands related to <span class="hljs-string">&quot;word&quot;</span>.<br>The target architecture is assumed to be riscv:rv64<br>warning: No executable has been specified and target does not support<br>determining executable automatically.  Try using the <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-built_in">command</span>.<br>0x0000000000001000 <span class="hljs-keyword">in</span> ?? ()<br>(gdb)<br></code></pre></td></tr></table></figure><p>3.3  <strong>给代码打断点</strong>  </p><ul><li><code>file user/_ls</code></li><li><code>b main</code></li><li><code>c</code></li><li>之后就是正常的<code>GDB</code>  使用流程了</li></ul><p> <strong>第二个窗口：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) file user/_ls<br>Reading symbols from user/_ls...<br>(gdb) b main<br>Breakpoint 1 at 0x27a: file user/ls.c, line 75.<br>(gdb) c<br>Continuing.<br>[Switching to Thread 1.3]<br><br>Thread 3 hit Breakpoint 1, main (argc=0, argv=0x6c &lt;fmtname+108&gt;)<br>    at user/ls.c:75<br>75      &#123;<br>(gdb)<br></code></pre></td></tr></table></figure><p> <strong>第一个窗口</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">(......)<br>xv6 kernel is booting                                        <br>                                                                <br>hart 1 starting                                                  <br>hart 2 starting                                                  <br>init: starting sh                                                <br>$ ls<br>(等待 gdb 发送 <span class="hljs-built_in">continue</span> 信号)<br></code></pre></td></tr></table></figure><p> <img src="/img/6.S081/gdb.png" alt="图1：在QEMU中使用GDB"></p></li><li><p>之后我们就可以正常地通过 <code>GDB</code> 调试程序了~</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>MIT</tag>
      
      <tag>Open Course</tag>
      
      <tag>6.S081</tag>
      
      <tag>OS</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Actions自动部署Hexo博客</title>
    <link href="/202106/Hexo-CI/"/>
    <url>/202106/Hexo-CI/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文将介绍如何利用Github Actions功能自动部署博客。这样本地就不需要安装<code>Node.js</code>以及<code>Hexo</code>包，写完文档直接push到远程仓库，由Github Actions自动部署到博客网站上。由于本网站现阶段托管于<code>github.io</code>，因此我目前的需求是，推送博客文章的更改后，生成对应的静态网页，最后将静态网页内容自动推送到 <code>username.github.io</code> 这个仓库中。</p><h2 id="必要的准备"><a href="#必要的准备" class="headerlink" title="必要的准备"></a>必要的准备</h2><h3 id="测试常规Hexo部署流程"><a href="#测试常规Hexo部署流程" class="headerlink" title="测试常规Hexo部署流程"></a>测试常规Hexo部署流程</h3><p>参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">Hexo Doc</a>，</p><ol><li><p>安装 hexo-deployer-git</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>修改Hexo项目的根目录中的<code>_config.yml</code>文件</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;git@github.com:username/username.github.io.git&gt;</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">&lt;your-username?</span><br><span class="hljs-attr">email:</span> <span class="hljs-string">&lt;your-email&gt;</span><br></code></pre></td></tr></table></figure><p> 使用<code>hexo clean &amp;&amp; hexo g -d</code> 命令测试常规Hexo部署流程是否正常。</p></li></ol><h3 id="创建两个仓库"><a href="#创建两个仓库" class="headerlink" title="创建两个仓库"></a>创建两个仓库</h3><p><a href="https://hexo.io/zh-cn/docs/one-command-deploymen">Hexo部署文档</a>中有过说明，最好将Hexo项目目录与静态博客网页分别使用两个Git仓库管理，因此我们准备两个仓库。</p><ol><li>创建<code>my-blog</code>仓库存放Hexo项目目录</li><li>创建<code>username.github.io</code>仓库用来存放静态博客页面</li></ol><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><ol><li><p>生成一个RSA密钥专供GitHub Actions部署Hexo网页使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -f github-deploy-key<br></code></pre></td></tr></table></figure><p>当前目录下会有<code>github-deploy-key</code>（私钥）和<code>github-deploy-key.pub</code>（公钥）两个文件。</p></li><li><p>配置部署密钥<br> 2.1 复制公钥，设置为<code>username.github.io</code>仓库的部署密钥（<code>Settings -&gt; Deploy keys -&gt; Add deploy key</code>）</p><ul><li>Title 填写 <code>HEXO_DEPLOY_PUB</code></li><li>Key 填写复制的公钥</li><li>勾选<code>Allow write access</code>选项</li></ul><p> 2.2 复制私钥，设置为<code>my-blog</code>项目的密文（<code>Settings -&gt; Secrets -&gt; Add a new secret</code>）</p><ul><li>Name填写<code>HEXO_DEPLOY_PRI</code></li><li>Value填写复制的私钥</li></ul></li></ol><h2 id="编写Workflow"><a href="#编写Workflow" class="headerlink" title="编写Workflow"></a>编写Workflow</h2><p>Github使用workflow定义Github Actions的执行的环境与命令，作用类似于Gitlab中的<code>.gitlab-ci.yml</code></p><ol><li><p>在Hexo项目根目录下新建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir -p .github/workflows<br>$ touch .github/workflows/deploy.yml<br></code></pre></td></tr></table></figure></li><li><p>编辑<code>deploy.yml</code></p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo-CI</span><br><br><span class="hljs-attr">on:</span><br>    <span class="hljs-attr">push:</span><br>        <span class="hljs-attr">branches:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">env:</span><br><span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">your-github-username</span><br><span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">your-github-email</span><br><span class="hljs-attr">THEME_NAME:</span> <span class="hljs-string">hexo-theme-fluid</span><br><span class="hljs-attr">DEPLOY_REPO:</span> <span class="hljs-string">username/username.github.io</span><br><span class="hljs-attr">DEPLOY_BRANCH:</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">14.</span><span class="hljs-string">x</span>]<br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">deploy</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="hljs-string">        mkdir -p ~/.ssh/</span><br><span class="hljs-string">        echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">        git config --global user.name $GIT_USER</span><br><span class="hljs-string">        git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string"></span>        <br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span> <span class="hljs-string">and</span> <span class="hljs-string">theme</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string">        npm install --save $&#123;&#123; env.THEME_NAME &#125;&#125;</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure></li><li><p>整理Hexo目录，推送更改到<code>my-blog</code>仓库<br><code>.gitignore</code>中应该包含对 <code>public/</code>, <code>.deploy_git/</code> 等由于Hexo生成静态网页的文件夹的排除</p></li><li><p>查看部署结果<br>查看<code>my-blog</code>仓库中Actions，可以看到本次推送触发Actions的执行结果。<br><img src="/img/hexo-ci/action-result.png"></p></li></ol><p><strong>模板参数说明</strong></p><ul><li><code>name</code> 为此 Action 的名字</li><li><code>on</code> 触发条件，目前含义为，当master分支收到推送后，触发Actions</li><li><code>env</code> 为一些环境变量，默认变量参考<a href="https://docs.github.com/cn/actions/reference/environment-variables">环境变量 on Github Docs</a></li><li><code>env.GIT_USER</code> 为 Hexo 编译后使用此 git 用户部署到仓库</li><li><code>env.GIT_EMAIL</code> 为 Hexo 编译后使用此 git 邮箱部署到仓库</li><li><code>env.THEME_NAME</code> 为您的 Hexo 所使用的主题的仓库，这里为 hexo-theme-fluid</li><li><code>env.DEPLOY_REPO</code> 为 Hexo 编译后要部署的仓库，写托管静态网页的仓库</li><li><code>env.DEPLOY_BRANCH</code> 为 Hexo 编译后要部署到的分支，如果是非master分支，参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment#Git">Hexo Doc</a> 和<code>Github</code>仓库中<code>settings-&gt;pages-&gt;branch</code>处进行更改</li><li><code>jobs</code> 为此 Action 下的任务列表，具体语法参考<a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions">Job Vars on Github Docs</a></li><li><code>jobs.&#123;job&#125;.name</code> 任务名称</li><li><code>jobs.&#123;job&#125;.runs-on</code> 任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。</li><li><code>jobs.&#123;job&#125;.steps.$.name</code> 步骤名，编译时会会以 LOG 形式输出。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客</a></li><li><a href="https://printempw.github.io/use-github-actions-to-deploy-hexo-blog/">使用 GitHub Actions 自动部署 Hexo 博客</a></li><li><a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions">Github Actions Reference</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CI</tag>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
