<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS144-实验环境搭建和Lab0</title>
    <link href="/202205/cs144-lab0/"/>
    <url>/202205/cs144-lab0/</url>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ol><li>这次打算用 Jetbrains Gateway进行远程开发。按照 CS144 README 进行远端Clion的配置。注意环境变量和编译时传给cmake的宏的设置。<br><img src="/img/cs144-pic/lab0-clion-debug.png"></li><li>安装TcpDump，最好从Github的源码编译安装，5.0版本后的tcpdump可以保存pcap文件中同时输出到标准输出流中。</li></ol><h2 id="实验0"><a href="#实验0" class="headerlink" title="实验0"></a>实验0</h2><p>使用TCPsocket和一个webserver（对端监听80端口）进行通信，类似于curl。</p><p>代码十分简单，按照socket通信流程编写即可。lab0仅完成下图中描述的TCP客户端流程即可</p><blockquote><p><img src="/img/cs144-pic/socket-client&server.png"></p><p>图片来源微信公众号<a href="https://mp.weixin.qq.com/s/Ytw_N5zeLH50ItdgAsv3nA">Linux fd 系列 — socket fd 是什么？</a></p></blockquote><p>下面给出我的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_URL</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;host, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;path)</span> </span>&#123;<br>    <span class="hljs-comment">// Your code here.</span><br><br>    <span class="hljs-comment">// You will need to connect to the &quot;http&quot; service on</span><br>    <span class="hljs-comment">// the computer whose name is in the &quot;host&quot; string,</span><br>    <span class="hljs-comment">// then request the URL path given in the &quot;path&quot; string.</span><br>    TCPSocket sock&#123;&#125;;<br>    sock.connect(Address(host, <span class="hljs-string">&quot;http&quot;</span>));<br>    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">input_str</span><span class="hljs-params">(<span class="hljs-string">&quot;GET &quot;</span> + path + <span class="hljs-string">&quot; HTTP/1.1\r\nHost: &quot;</span> + host + <span class="hljs-string">&quot;\r\n\r\n&quot;</span>)</span></span>;<br>    sock.write(input_str);<br><br>    <span class="hljs-comment">// Then you&#x27;ll need to print out everything the server sends back,</span><br>    <span class="hljs-comment">// (not just one call to read() -- everything) until you reach</span><br>    <span class="hljs-comment">// the &quot;eof&quot; (end of file).</span><br>    sock.shutdown(SHUT_WR);<br>    <span class="hljs-keyword">while</span> (!sock.eof())<br>        <span class="hljs-built_in">cout</span> &lt;&lt; sock.read();<br>    sock.close();<br>    <span class="hljs-comment">// cerr &lt;&lt; &quot;Function called: get_URL(&quot; &lt;&lt; host &lt;&lt; &quot;, &quot; &lt;&lt; path &lt;&lt; &quot;).\n&quot;;</span><br>    <span class="hljs-comment">// cerr &lt;&lt; &quot;Warning: get_URL() has not been implemented yet.\n&quot;;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li><p>如果使用Clion的话，需要先build All Test，再运行相关测试。测试的那些target只运行测试不进行编译链接</p></li><li><p>进行抓包测试。  我的客户端是先半关闭，再一点点读对端发来的数据。抓到的包也反映了这一点</p><p> 如果使用5.0版本的tcpdump的话，可以使用–print参数。否则只能先保存，再查看。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tcpdump  -i any -ent host cs144.keithw.org -w ./pcap/lab0.pcap<br></code></pre></td></tr></table></figure><p><img src="/img/cs144-pic/lab0-pcap.png"></p><blockquote><p>这里使用了Vscode Crumbs插件用来在Vscode中看pcap包</p></blockquote><h2 id="附：CS144代码风格"><a href="#附：CS144代码风格" class="headerlink" title="附：CS144代码风格"></a>附：CS144代码风格</h2><p>CS144 使用 C++11 标准完成实验，它对C++代码的风格有着严格的限制：</p><ul><li><p>使用 Resource acquisition is initialization 风格，即 RAII 风格。</p></li><li><p>禁止使用 malloc 和 free 函数</p></li><li><p>禁止使用 new 和 delete 关键字</p></li><li><p>禁止使用原生指针（*）。若有必要，最好使用智能指针（unique_ptr等等）。(该实验没有必要用到指针)。</p></li><li><p>禁止使用模板、线程相关、各类锁机制以及虚函数</p></li><li><p>禁止使用 C 风格字符串(char*) 以及 C 风格字符串处理函数。使用 string 来代替。</p></li><li><p>禁止使用 C 风格强制类型转换。若有必要请使用 static_cast</p></li><li><p>传递参数给函数时，请使用常量引用类型（const Ty&amp; t）</p></li><li><p>尽可能将每个变量和函数方法都声明成 const</p></li><li><p>禁止使用全局变量，以及尽可能让每个变量的作用域最小</p></li><li><p>在完成代码后，务必使用 make format 来标准化代码风格。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CS144</tag>
      
      <tag>TCP/IP</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmux配置与美化</title>
    <link href="/202107/tmux-tutorial/"/>
    <url>/202107/tmux-tutorial/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了我目前使用的Tmux配置。一来是目前的配置用着还算舒服，写此文安利一下；二来也记录一下键位映射，以做备忘。</p><p><a href="https://github.com/Gwzlchn/dotConfig/tree/master/tmux">我的Tmux配置目录</a></p><h2 id="Oh-My-Tmux"><a href="#Oh-My-Tmux" class="headerlink" title="Oh-My-Tmux"></a>Oh-My-Tmux</h2><p>目前我用的配置是基于<a href="https://github.com/gpakosz/.tmux"><code>Oh-My-Tmux</code></a>项目改造的。在这个项目上我进行了一些配色的改变（原生的黑白红是在欣赏不起来），最终效果如下图1所示，环境为<code>Windows Terminal + WSL2 + Tmux 3.0a</code><br><img src="/img/2021-07-19-tmux-tutorial/tmux-nord.png" alt="图1：Tmux效果图"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置文件的安装<br><em><strong>这里是对oh-my-tmux的安装流程复述</strong></em></p><ul><li><p>前置条件</p><ul><li><code>Tmux</code>版本大于等于2.4。Tmux的版本可以通过<code>tmux -V</code>命令查看。</li><li>预装awk、perl、sed工具</li><li><code>$TERM</code>变量必须设置为<code>xterm-256color</code>。这个变量是在<code>~/.bashrc</code>中设置的，<code>echo $TERM</code>可以检查。</li></ul></li><li><p>安装配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/Gwzlchn/dotConfig.git<br>$ ln -s -f ~/dotConfig/tmux/.tmux.conf<br>$ cp ~/dotConfig/tmux/.tmux.conf.local .<br></code></pre></td></tr></table></figure></li></ul></li><li><p>字体的安装<br>本配置文件中的一些符号图标的显示依赖<code>Nerd Font</code>字体，所以需要在终端软件所在的系统中安装<code>Nerd Font</code>字体。   </p><p><code>Nerd Font</code>并不是一种字体，而是在原有字体上增加了一些Unicode符号的一个字体补丁。你既可以选择手动为自己目前用的字体打上<code>Nerd Font</code>补丁（参考<a href="https://zhuanlan.zhihu.com/p/150097941">使用nerd-font&#x2F;font-patcher为字体添加字体图标</a>），也可以在<a href="https://www.nerdfonts.com/font-downloads">Nerd Font Download</a>页面下载打好补丁后的字体。我用的是<code>FiraCode NerdFont</code>，这个字体看起来比较纤细，同时带连字符效果。  </p><p>我目前用的终端是<code>Windows Terminal</code>,Windows安装字体比较简单，点开字体安装即可。之后需要将终端软件配置为刚刚安装的字体。打开<code>Windows Terminal</code>的配置文件<code>settings.json</code>，在<code>profiles.defaults</code>字段下增加<code>&quot;fontFace&quot;: xxxx</code>这个属性。如下所示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"> <span class="hljs-string">&quot;profiles&quot;</span>:<br> &#123;<br>     <span class="hljs-attr">&quot;defaults&quot;</span>:<br>     &#123;<br>         <span class="hljs-comment">// Put settings here that you want to apply to all profiles.</span><br>         <span class="hljs-comment">// &quot;colorScheme&quot;: &quot;Dracula&quot;,</span><br>         <span class="hljs-comment">//&quot;acrylicOpacity&quot; : 0.4,</span><br>         <span class="hljs-attr">&quot;useAcrylic&quot;</span> : <span class="hljs-literal">true</span>,<br>         <span class="hljs-attr">&quot;fontSize&quot;</span>:<span class="hljs-number">13</span>,<br>         <span class="hljs-attr">&quot;fontFace&quot;</span>: <span class="hljs-string">&quot;FiraCode Nerd Font&quot;</span>,<br>         <span class="hljs-attr">&quot;startingDirectory&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br>         <span class="hljs-attr">&quot;bellStyle&quot;</span>:<span class="hljs-string">&quot;none&quot;</span><br>     &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果完成了上述的安装流程，那么你在<code>Windows Terminal</code>中进入<code>WSL2</code>环境后，输入<code>tmux</code>应该就可以看到图1的效果了。</p></li></ol><h2 id="键位映射"><a href="#键位映射" class="headerlink" title="键位映射"></a>键位映射</h2><p>Tmux另一个迷人之处在于你可以用纯键盘来控制终端窗口的增删查改、甚至是缩放与恢复(<del>1.意味着极大概率会碰到Tmux快捷键与其他软件冲突的情况。2.意味着我经常记不住冷门的快捷键映射</del>。3.意味着你可以套用VIM的键位映射，但这里我没有用，<del>因为我不熟VIM</del>)。</p><p><strong>一些键位符号的约定</strong></p><ol><li><code>&lt;prefix&gt;</code> 表示前缀键，需要同时按<code>Ctrl + b</code>触发。按下之后状态栏会有提示，表示等待后续按键的输入（Oh-my-tmux效仿Screen，将<code>Ctrl+a</code>也映射成了前缀键，但会和<code>Qemu</code>冲突，故我这里取消了这个映射）</li><li><code>&lt;prefix&gt; c</code> 表示新建一个窗口，需要先同时按<code>Ctrl + b</code>，再按<code>c</code>键触发。</li><li><code>&lt;prefix&gt; C-c</code> 表示新建一个会话，需要先同时按<code>Ctrl + b</code>，再同时按<code>Ctrl - c</code>键触发。</li><li><code>&lt;CR&gt;</code>表示回车</li></ol><table><thead><tr><th>键位映射</th><th>动作</th><th>备注</th></tr></thead><tbody><tr><td><code>&lt;prefix&gt; e</code></td><td>编辑<code>~/.tmux.conf.local</code>配置文件</td><td></td></tr><tr><td><code>&lt;prefix&gt; r</code></td><td>重新加载<code>~/.tmux.conf.local</code>配置</td><td></td></tr><tr><td><code>&lt;prefix&gt; C-c</code></td><td>新建一个Session</td><td></td></tr><tr><td><code>&lt;prefix&gt; c</code></td><td>新建一个Window</td><td></td></tr><tr><td><code>&lt;prefix&gt; $</code></td><td>重命名当前Session</td><td></td></tr><tr><td><code>&lt;prefix&gt; ,</code></td><td>重命名当前Window</td><td></td></tr><tr><td><code>&lt;prefix&gt; %</code></td><td>新建一个垂直方向的Panel</td><td></td></tr><tr><td><code>&lt;prefix&gt; _</code> (下划线)</td><td>同上</td><td></td></tr><tr><td><code>&lt;prefix&gt; “</code></td><td>新建一个水平方向的Panel</td><td></td></tr><tr><td><code>&lt;prefix&gt; -</code> (减号)</td><td>同上</td><td></td></tr><tr><td><code>&lt;prefix&gt; w</code></td><td>查看所有打开的Session和Windows</td><td>可以通过<code>j/k &lt;CR&gt;</code>来跳转</td></tr><tr><td><code>&lt;prefix&gt;  + Up/Left/Down/Right</code></td><td>更改一个Window内Panel大小</td><td>按方向键的时候，<code>&lt;prefix&gt;</code>不要松开</td></tr><tr><td><code>&lt;prefix&gt; h/j/k/l</code></td><td>在一个Window内切换到不同的Panel中</td><td>使用方向键亦可，按方向键的时候，<code>&lt;prefix&gt;</code>需要松开</td></tr><tr><td><code>&lt;prefix&gt; &lt;</code>&#x2F;<code>&lt;prefix&gt; &gt;</code></td><td>交换两个Panel的位置</td><td></td></tr><tr><td><code>&lt;prefix&gt; C-h</code>&#x2F;<code>&lt;prefix&gt; C-l</code></td><td>在一个Session内的不同Window中切换</td><td>默认的<code>&lt;prefix&gt; n/p</code>切换方式已解绑</td></tr><tr><td><code>&lt;prefix&gt; +</code></td><td>将当前Panel最大化成为一个Window，或者恢复一个Window为Panel</td><td><strong>这个是Oh-My-Tmux最有用的功能</strong></td></tr><tr><td><code>&lt;prefix&gt; m</code></td><td>Tmux鼠标模式开关</td><td>默认开</td></tr><tr><td><code>&lt;prefix&gt; &lt;CR&gt;</code>&#x2F;<code>&lt;prefix&gt; [</code></td><td>进入Tmux 复制模式</td><td></td></tr><tr><td>Copy Mode <code>q</code></td><td>退出复制模式</td><td>在复制模式下</td></tr><tr><td>Copy Mode <code>C-Space</code></td><td>开始复制</td><td>同上</td></tr><tr><td>Copy Mode <code>C-w</code></td><td>将选中内容复制到Tmux Buffer中</td><td>同上</td></tr><tr><td><code>&lt;prefix&gt; p</code>&#x2F;<code>&lt;prefix&gt; ]</code></td><td>将最新的Tmux Buffer中的内容粘贴到终端中</td><td></td></tr><tr><td><code>&lt;prefix&gt; P</code></td><td>选择任意Tmux Buffer中的内容粘贴到终端中</td><td></td></tr><tr><td><code>&lt;prefix&gt; b</code></td><td>查看目前所有的Tmux Buffer中的内容</td><td></td></tr></tbody></table><h2 id="美化Tmux"><a href="#美化Tmux" class="headerlink" title="美化Tmux"></a>美化Tmux</h2><p>Oh-My-Tmux给了较大的美化空间，如图2所示。四个方框依次对应的是1.status left, 2.window status, 3.window current status, 4.status right。清楚了这个对应关系，再看<code>~/.tmux.conf.local</code>中的内容就很清楚了。右侧状态栏比较好的一点是，当你使用的SSH登录到远程主机时，username和hostname也会随之改变。</p><p>配色方案我这里选用的是<a href="https://www.nordtheme.com/docs/colors-and-palettes">Nord Color Scheme</a><br><img src="/img/2021-07-19-tmux-tutorial/tmux-statusbar.png" alt="图2：Tmux状态栏效果"></p><p>最后附上我目前用的状态栏配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs config"># window status style<br>#   - built-in variables are:<br>#     - #&#123;circled_window_index&#125;<br>#     - #&#123;circled_session_name&#125;<br>#     - #&#123;hostname&#125;<br>#     - #&#123;hostname_ssh&#125;<br>#     - #&#123;hostname_full&#125;<br>#     - #&#123;hostname_full_ssh&#125;<br>#     - #&#123;username&#125;<br>#     - #&#123;username_ssh&#125;<br>tmux_conf_theme_window_status_fg=$nord5             <br>tmux_conf_theme_window_status_bg=$nord1              <br>tmux_conf_theme_window_status_attr=&quot;none&quot;<br>tmux_conf_theme_window_status_format=&quot;#I #W&quot;<br><br># window current status style<br>#   - built-in variables are:<br>#     - #&#123;circled_window_index&#125;<br>#     - #&#123;circled_session_name&#125;<br>#     - #&#123;hostname&#125;<br>#     - #&#123;hostname_ssh&#125;<br>#     - #&#123;hostname_full&#125;<br>#     - #&#123;hostname_full_ssh&#125;<br>#     - #&#123;username&#125;<br>#     - #&#123;username_ssh&#125;<br>#   ﲵ            ﮊ ﮏ ♥ ﰸ ﯅  <br>tmux_conf_theme_window_status_current_fg=$nord6      <br>tmux_conf_theme_window_status_current_bg=$nord10 <br>tmux_conf_theme_window_status_current_attr=&quot;bold&quot;<br>tmux_conf_theme_window_status_current_format=&quot; #W&quot;<br><br># window activity status style<br>tmux_conf_theme_window_status_activity_fg=&quot;default&quot;<br>tmux_conf_theme_window_status_activity_bg=&quot;default&quot;<br>tmux_conf_theme_window_status_activity_attr=&quot;underscore&quot;<br><br># window bell status style<br>tmux_conf_theme_window_status_bell_fg=&#x27;#ffff00&#x27; <br>tmux_conf_theme_window_status_bell_bg=&quot;default&quot;<br>tmux_conf_theme_window_status_bell_attr=&quot;blink,bold&quot;<br><br># window last status style<br>tmux_conf_theme_window_status_last_fg=&quot;default&quot;<br>tmux_conf_theme_window_status_last_bg=&quot;default&quot;<br>tmux_conf_theme_window_status_last_attr=&quot;none&quot;<br>tmux_conf_theme_window_status_last_format=&#x27;#I #W-&#x27;<br><br># status left/right content:<br>#   - separate main sections with &quot;|&quot;<br>#   - separate subsections with &quot;,&quot;<br>#   - built-in variables are:<br>#     - #&#123;battery_bar&#125;<br>#     - #&#123;battery_hbar&#125;<br>#     - #&#123;battery_percentage&#125;<br>#     - #&#123;battery_status&#125;<br>#     - #&#123;battery_vbar&#125;<br>#     - #&#123;circled_session_name&#125;<br>#     - #&#123;hostname_ssh&#125;<br>#     - #&#123;hostname&#125;<br>#     - #&#123;hostname_full&#125;<br>#     - #&#123;hostname_full_ssh&#125;<br>#     - #&#123;loadavg&#125;<br>#     - #&#123;mouse&#125;<br>#     - #&#123;pairing&#125;<br>#     - #&#123;prefix&#125;<br>#     - #&#123;root&#125;<br>#     - #&#123;synchronized&#125;<br>#     - #&#123;uptime_y&#125;<br>#     - #&#123;uptime_d&#125; (modulo 365 when #&#123;uptime_y&#125; is used)<br>#     - #&#123;uptime_h&#125;<br>#     - #&#123;uptime_m&#125;<br>#     - #&#123;uptime_s&#125;<br>#     - #&#123;username&#125;<br>#     - #&#123;username_ssh&#125;<br>tmux_conf_theme_status_left=&quot;  #S &quot;<br>#tmux_conf_theme_status_right=&quot;#&#123;prefix&#125;#&#123;mouse&#125;#&#123;pairing&#125;#&#123;synchronized&#125;#&#123;?battery_status,#&#123;battery_status&#125;,&#125;#&#123;?battery_bar, #&#123;battery_bar&#125;,&#125;#&#123;?battery_percentage, #&#123;battery_percentage&#125;,&#125; , %R , %d %b | #&#123;username&#125;#&#123;root&#125; | #&#123;hostname&#125; &quot;<br>tmux_conf_theme_status_right=&#x27;#&#123;prefix&#125;#&#123;pairing&#125;#&#123;synchronized&#125;#&#123;?battery_bar, #&#123;battery_bar&#125;,&#125;#&#123;?battery_percentage, #&#123;battery_percentage&#125;,&#125;#&#123;?battery_status,#&#123;battery_status&#125;,&#125; | %b %d | %R | <br>tmux_conf_theme_status_left_fg=$nord5 # &#x27;#e4e4e4,#e4e4e4,#e4e4e4&#x27;  # black, white , white<br>tmux_conf_theme_status_left_bg=$nord0 #&#x27;,#00afff&#x27;  # yellow, pink, white blue<br>tmux_conf_theme_status_left_attr=&#x27;bold,none,none&#x27;<br><br># status right style<br>#tmux_conf_theme_status_right_fg=&quot;$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14&quot;<br>#tmux_conf_theme_status_right_bg=&quot;$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17&quot;<br>tmux_conf_theme_status_right_fg=$nord4,$nord6,$nord6,$nord5,$nord5<br>tmux_conf_theme_status_right_bg=$nord1,$nord7,$nord10,$nord2,$nord1 # dark gray, red, white<br>tmux_conf_theme_status_right_attr=&#x27;bold,none,bold,none,none,none&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tmux</tag>
      
      <tag>dotConfig</tag>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[MIT-6.S081/Fall2020] 实验笔记零 Lab0: Preparation</title>
    <link href="/202106/6-s081-lab0/"/>
    <url>/202106/6-s081-lab0/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>为了更好地理解RISC-V指令集，也为了熟悉QEMU，所以选择刷一遍MIT-6.S081的实验。希望不仅仅以做Lab为目的，同时也精读几篇OS领域经典文章。</p><hr><p><strong>可能好多人都卡在环境准备上，但后来我发现：趁早动手做实验，比准备环境更重要~</strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参考 6.S081 官方的配置教程：<a href="https://pdos.csail.mit.edu/6.S081/2020/tools.html">Tools</a></p><p>本人用的环境是基于<code>Qemu(KVM)</code>上的<code>Ubuntu 20.04</code>。</p><p>首先安装RISC-V工具链、GDB-Multiarch、QEMU：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu  binutils-riscv64-linux-gnu gcc-riscv64-unknown-elf<br><br><span class="hljs-comment"># fix qemu</span><br>sudo apt-get remove qemu-system-misc<br>sudo apt-get install qemu-system-misc=1:4.2-3ubuntu6<br></code></pre></td></tr></table></figure><p>检查一遍自己的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ riscv64-linux-gnu-gcc --version<br>riscv64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0<br>Copyright (C) 2019 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br><br>$ qemu-system-riscv64 --version<br>QEMU emulator version 4.2.0 (Debian 1:4.2-3ubuntu6)<br>Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers<br><br>$ riscv64-unknown-elf-gcc --version<br>riscv64-unknown-elf-gcc () 9.3.0<br>Copyright (C) 2019 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></td></tr></table></figure><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>能在<code>QEMU</code>中启动<code>xv6</code>，环境就算准备完了，可以动手做实验了~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2020<br>Cloning into <span class="hljs-string">&#x27;xv6-labs-2020&#x27;</span>...<br>...<br>$ <span class="hljs-built_in">cd</span> xv6-labs-2020<br>$ git checkout util<br>Branch <span class="hljs-string">&#x27;util&#x27;</span> <span class="hljs-built_in">set</span> up to track remote branch <span class="hljs-string">&#x27;util&#x27;</span> from <span class="hljs-string">&#x27;origin&#x27;</span>.<br>Switched to a new branch <span class="hljs-string">&#x27;util&#x27;</span><br><br>$ make qemu<br>···<br>xv6 kernel is booting<br><br>hart 2 starting<br>hart 1 starting<br>init: starting sh<br>$ ls<br>.              1 1 1024<br>..             1 1 1024<br>README         2 2 2059<br>xargstest.sh   2 3 93<br>cat            2 4 24256<br><span class="hljs-built_in">echo</span>           2 5 23080<br>(...other files)<br><br></code></pre></td></tr></table></figure><p>退出 <code>QEMU</code> 快捷键是 <code>Ctrl-a + x</code></p><p>好了，我们现在可以动手做实验了。</p><h2 id="如何在-QEMU-中使用-gdb"><a href="#如何在-QEMU-中使用-gdb" class="headerlink" title="如何在 QEMU 中使用 gdb"></a>如何在 <code>QEMU</code> 中使用 <code>gdb</code></h2><ol><li><p>首先用 <code>tmux</code> 开两个终端窗口。</p></li><li><p>第一个窗口键入<code>make qemu-gdb</code>.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make qemu-gdb<br>*** Now run <span class="hljs-string">&#x27;gdb&#x27;</span> <span class="hljs-keyword">in</span> another window. qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -drive file=fs.img,<span class="hljs-keyword">if</span>=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 -S -gdb tcp::26000<br></code></pre></td></tr></table></figure></li><li><p>在第二个窗口中:<br>3.1. 修改自己 <code>home</code> 目录下的 <code>.gdbinit</code> 文件，允许 <code>gdb</code> 在<code>xv6-labs-2020</code>这个目录启动的时候，加载该文件夹下的 <code>.gdbinit</code> 文件。 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path <span class="hljs-subst">$(pwd)</span>/.gdbinit &quot;</span> &gt;&gt; ~/.gdbinit<br></code></pre></td></tr></table></figure><p> 3.2. 启动 <code>gdb-multiarch</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb-multiarch      <br>GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2<br>Copyright (C) 2020 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.ht<br>ml&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type <span class="hljs-string">&quot;show copying&quot;</span> and <span class="hljs-string">&quot;show warranty&quot;</span> <span class="hljs-keyword">for</span> details.<br>This GDB was configured as <span class="hljs-string">&quot;x86_64-linux-gnu&quot;</span>.<br>Type <span class="hljs-string">&quot;show configuration&quot;</span> <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For <span class="hljs-built_in">help</span>, <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span>.<br>Type <span class="hljs-string">&quot;apropos word&quot;</span> to search <span class="hljs-keyword">for</span> commands related to <span class="hljs-string">&quot;word&quot;</span>.<br>The target architecture is assumed to be riscv:rv64<br>warning: No executable has been specified and target does not support<br>determining executable automatically.  Try using the <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-built_in">command</span>.<br>0x0000000000001000 <span class="hljs-keyword">in</span> ?? ()<br>(gdb)<br></code></pre></td></tr></table></figure><p>3.3  <strong>给代码打断点</strong>  </p><ul><li><code>file user/_ls</code></li><li><code>b main</code></li><li><code>c</code></li><li>之后就是正常的<code>GDB</code>  使用流程了</li></ul><p> <strong>第二个窗口：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) file user/_ls<br>Reading symbols from user/_ls...<br>(gdb) b main<br>Breakpoint 1 at 0x27a: file user/ls.c, line 75.<br>(gdb) c<br>Continuing.<br>[Switching to Thread 1.3]<br><br>Thread 3 hit Breakpoint 1, main (argc=0, argv=0x6c &lt;fmtname+108&gt;)<br>    at user/ls.c:75<br>75      &#123;<br>(gdb)<br></code></pre></td></tr></table></figure><p> <strong>第一个窗口</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">(......)<br>xv6 kernel is booting                                        <br>                                                                <br>hart 1 starting                                                  <br>hart 2 starting                                                  <br>init: starting sh                                                <br>$ ls<br>(等待 gdb 发送 <span class="hljs-built_in">continue</span> 信号)<br></code></pre></td></tr></table></figure><p> <img src="/img/6.S081/gdb.png" alt="图1：在QEMU中使用GDB"></p></li><li><p>之后我们就可以正常地通过 <code>GDB</code> 调试程序了~</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>MIT</tag>
      
      <tag>Open Course</tag>
      
      <tag>6.S081</tag>
      
      <tag>OS</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Actions自动部署Hexo博客</title>
    <link href="/202106/Hexo-CI/"/>
    <url>/202106/Hexo-CI/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文将介绍如何利用Github Actions功能自动部署博客。这样本地就不需要安装<code>Node.js</code>以及<code>Hexo</code>包，写完文档直接push到远程仓库，由Github Actions自动部署到博客网站上。由于本网站现阶段托管于<code>github.io</code>，因此我目前的需求是，推送博客文章的更改后，生成对应的静态网页，最后将静态网页内容自动推送到 <code>username.github.io</code> 这个仓库中。</p><h2 id="必要的准备"><a href="#必要的准备" class="headerlink" title="必要的准备"></a>必要的准备</h2><h3 id="测试常规Hexo部署流程"><a href="#测试常规Hexo部署流程" class="headerlink" title="测试常规Hexo部署流程"></a>测试常规Hexo部署流程</h3><p>参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">Hexo Doc</a>，</p><ol><li><p>安装 hexo-deployer-git</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>修改Hexo项目的根目录中的<code>_config.yml</code>文件</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;git@github.com:username/username.github.io.git&gt;</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">&lt;your-username?</span><br><span class="hljs-attr">email:</span> <span class="hljs-string">&lt;your-email&gt;</span><br></code></pre></td></tr></table></figure><p> 使用<code>hexo clean &amp;&amp; hexo g -d</code> 命令测试常规Hexo部署流程是否正常。</p></li></ol><h3 id="创建两个仓库"><a href="#创建两个仓库" class="headerlink" title="创建两个仓库"></a>创建两个仓库</h3><p><a href="https://hexo.io/zh-cn/docs/one-command-deploymen">Hexo部署文档</a>中有过说明，最好将Hexo项目目录与静态博客网页分别使用两个Git仓库管理，因此我们准备两个仓库。</p><ol><li>创建<code>my-blog</code>仓库存放Hexo项目目录</li><li>创建<code>username.github.io</code>仓库用来存放静态博客页面</li></ol><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><ol><li><p>生成一个RSA密钥专供GitHub Actions部署Hexo网页使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -f github-deploy-key<br></code></pre></td></tr></table></figure><p>当前目录下会有<code>github-deploy-key</code>（私钥）和<code>github-deploy-key.pub</code>（公钥）两个文件。</p></li><li><p>配置部署密钥<br> 2.1 复制公钥，设置为<code>username.github.io</code>仓库的部署密钥（<code>Settings -&gt; Deploy keys -&gt; Add deploy key</code>）</p><ul><li>Title 填写 <code>HEXO_DEPLOY_PUB</code></li><li>Key 填写复制的公钥</li><li>勾选<code>Allow write access</code>选项</li></ul><p> 2.2 复制私钥，设置为<code>my-blog</code>项目的密文（<code>Settings -&gt; Secrets -&gt; Add a new secret</code>）</p><ul><li>Name填写<code>HEXO_DEPLOY_PRI</code></li><li>Value填写复制的私钥</li></ul></li></ol><h2 id="编写Workflow"><a href="#编写Workflow" class="headerlink" title="编写Workflow"></a>编写Workflow</h2><p>Github使用workflow定义Github Actions的执行的环境与命令，作用类似于Gitlab中的<code>.gitlab-ci.yml</code></p><ol><li><p>在Hexo项目根目录下新建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir -p .github/workflows<br>$ touch .github/workflows/deploy.yml<br></code></pre></td></tr></table></figure></li><li><p>编辑<code>deploy.yml</code></p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo-CI</span><br><br><span class="hljs-attr">on:</span><br>    <span class="hljs-attr">push:</span><br>        <span class="hljs-attr">branches:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">env:</span><br><span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">your-github-username</span><br><span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">your-github-email</span><br><span class="hljs-attr">THEME_NAME:</span> <span class="hljs-string">hexo-theme-fluid</span><br><span class="hljs-attr">DEPLOY_REPO:</span> <span class="hljs-string">username/username.github.io</span><br><span class="hljs-attr">DEPLOY_BRANCH:</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">14.</span><span class="hljs-string">x</span>]<br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">deploy</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="hljs-string">        mkdir -p ~/.ssh/</span><br><span class="hljs-string">        echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">        git config --global user.name $GIT_USER</span><br><span class="hljs-string">        git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string"></span>        <br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span> <span class="hljs-string">and</span> <span class="hljs-string">theme</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string">        npm install --save $&#123;&#123; env.THEME_NAME &#125;&#125;</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure></li><li><p>整理Hexo目录，推送更改到<code>my-blog</code>仓库<br><code>.gitignore</code>中应该包含对 <code>public/</code>, <code>.deploy_git/</code> 等由于Hexo生成静态网页的文件夹的排除</p></li><li><p>查看部署结果<br>查看<code>my-blog</code>仓库中Actions，可以看到本次推送触发Actions的执行结果。<br><img src="/img/hexo-ci/action-result.png"></p></li></ol><p><strong>模板参数说明</strong></p><ul><li><code>name</code> 为此 Action 的名字</li><li><code>on</code> 触发条件，目前含义为，当master分支收到推送后，触发Actions</li><li><code>env</code> 为一些环境变量，默认变量参考<a href="https://docs.github.com/cn/actions/reference/environment-variables">环境变量 on Github Docs</a></li><li><code>env.GIT_USER</code> 为 Hexo 编译后使用此 git 用户部署到仓库</li><li><code>env.GIT_EMAIL</code> 为 Hexo 编译后使用此 git 邮箱部署到仓库</li><li><code>env.THEME_NAME</code> 为您的 Hexo 所使用的主题的仓库，这里为 hexo-theme-fluid</li><li><code>env.DEPLOY_REPO</code> 为 Hexo 编译后要部署的仓库，写托管静态网页的仓库</li><li><code>env.DEPLOY_BRANCH</code> 为 Hexo 编译后要部署到的分支，如果是非master分支，参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment#Git">Hexo Doc</a> 和<code>Github</code>仓库中<code>settings-&gt;pages-&gt;branch</code>处进行更改</li><li><code>jobs</code> 为此 Action 下的任务列表，具体语法参考<a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions">Job Vars on Github Docs</a></li><li><code>jobs.&#123;job&#125;.name</code> 任务名称</li><li><code>jobs.&#123;job&#125;.runs-on</code> 任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。</li><li><code>jobs.&#123;job&#125;.steps.$.name</code> 步骤名，编译时会会以 LOG 形式输出。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客</a></li><li><a href="https://printempw.github.io/use-github-actions-to-deploy-hexo-blog/">使用 GitHub Actions 自动部署 Hexo 博客</a></li><li><a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions">Github Actions Reference</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CI</tag>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
